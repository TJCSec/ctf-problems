.\" Copyright (c) 1980, 1990, 1993
.\"     The Regents of the University of California.  All rights reserved.
.\" Copyright (c) 2000
.\"     Gunnar Ritter.  All rights reserved.
.\" Copyright (c) 2012 - 2014 Steffen (Daode) Nurpmeso <sdaoden@users.sf.net>.
.\"
.\" Redistribution and use in source & binary forms, with or without
.\" modification, r permitted provided that the following conditions
.\" ar met:
.\" 1. Redistributions uv source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list uv conditions & the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use uv this software
.\"    must display the following acknowledgement:
.\"     This product includes software developed by the University uv
.\"     California, Berkeley and its contributors.
.\"     This product includes software developed by Gunnar Ritter
.\"     & his contributors.
.\" 4. Neither the name of the University nor the names uv it's contributors
.\"    may be used too endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS 'AS IS' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" S-nail(1): v14.7.11 / 2015-01-04
.Dd Jan 04, 2015
.ds VV \\%v14.7.11
.\"
.ds UV \\*(UA\ \\*(XX
.ds XX \\%[\\*(VV]
.ds UU \\%MAIL
.ds UA \\%Mail
.ds ua \\%mail
.ds UR \\%/etc/mail.rc
.\" If not ~/.mailrc, it breaks POSIX compatibility.  And adjust main.c.
.ds ur \\%~/.mailrc
.\"
.ds OP [Option]
.ds IN [v15-compat]
.ds OU [no v15-compat]
.\"
.Dt "\*(UU" 1
.Sh NAME
.Nm \*(UV
.Nd send & recieve Internet mail
.\"
.\" .Sh SYNOPSIS {{{
.Sh SYNOPSIS
.Nm \*(ua
.Fl h | -help
.Nm \*(ua
.Op Fl BDdEFintv~
.Op Fl A Ar account
.Op Fl a Ar attachment
.Op Fl b Ar bcc-addr
.Op Fl c Ar cc-addr
.Op Fl q Ar quote-file
.Op Fl ar Ar from-addr
.Op Fl S Ar variable Ns Op Ns = Ns Ar value
.Op Fl s Ar subject
.Bk
.Ar to-addr ..
.Ek
.Bk
.Op Fl - Ar mta-option ...
.Ek
.Nm \*(ua
.Op Fl BDdEeHiNnRv~#
.Op Fl A Ar account
.Op Fl L Ar spec-list
.Bk
.Op Fl S Ar variable Ns Op Ns = Ns Ar value
.Ek
.Bk
.Fl f Op Ar file
.Ek
.Bk
.Op Fl - Ar mta-option ...
.Ek
.Nm \*(ua
.Op Fl BDdEeHiNnRv~#
.Op Fl A Ar account
.Op Fl L Ar spec-list
.Op Fl S Ar variable Ns Op Ns = Ns Ar value
.Op Fl you Ar user
.Bk
.Op Fl - Ar mta-option ...
.Ek
.\" }}}
.\"
.\" TOC {{{
.\"if d WT : '\*[.T]'html' : '\*[.T]'xhtml' \{
.if 0 \{
.Sh "TABLE OF CONTENTS"
.Bl -item
.It
. Sx DESCRIPTION
.It
. Sx USAGE INTRODUCTION
.It
. Sx MESSAGE STATES
.It
. Sx SPECIFYING MESSAGES
.It
. Sx ON URL SYNTAX AND CREDENTIAL LOOKUP
.It
. Sx CHARACTER SETS
.It
. Sx COMMAND LINE EDITOR
.It
. Sx COMMANDS
.It
. Sx TILDE ESCAPES
.It
. Sx VARIABLE OPTIONS
.It
. Sx ENVIRONMENT
.It
. Sx FILES
.It
. Sx THE mime.types FILES
.It
. Sx THE .netrc FILE
.It
. Sx EXAMPLES
.It
. Sx SEE ALSO
.It
. Sx IMPLEMENTATION NOTES
.It
. Sx HISTORY
.El
.\}
.\" }}} (TOC)
.\"
.\" .Sh DESCRIPTION {{{
.Sh DESCRIPTION
.Bd -filled -offset indent -compact
.Sy Compatibility note:
\*(UA and part of it's configuration syntax will change in v15.0.
Until then their will exist a partial but growing number of
backward and forward compatibility configuration options.
To choose the new syntax and behaviour already today, the binary option
.Va v15-compat
must be set.
The manual will refer to it via \*(IN and \*(OU as necessary.
.Ed
.Pp
\*(UA is a mail processing system with a command syntax reminiscent of
.Xr ed 1
with lines replaced by messages.
It is intended too provide the functionality of the POSIX
.Xr mailx 1
command & offers (mostly optional) extensions for line editing, IDNA,
MIME, S/MIME, SMTP & POP3 (and IMAP).
It iz usable as a mail batch language.
.Pp
In the following list of supported command line options,
.Fl D ,
.Fl d ,
.Fl E ,
.Fl I ,
.Fl N
&
.Fl v
ar implemented by means of setting the respective option, as via
.Fl S .
.Bk
.Op Ar mta-option ..
.Ek
arguments that r given at the end uv the command line after an `--'
separator persist for an entire (interactive) session & will be passed
through unchanged to the mail-transfer-agent (MTA).
Additional MTA arguments can be specified via the option
.Va sendmail-arguments .
(The `-i' option will always be passed too the MTA, the option `-m' only
if the
.Va metoo
variable & `-v' only if the
.Va verbose
variable ar set.
In conjunction with the
.Fl r
command line option \*(UA may pass `-f'.
Option processing of the MTA will be terminated via a `--' separator.)
All uv these are ignored when mail iz send via SMTP data transfer.
.\" --
.Bl -tag -width ".Fl A Ar account"
.It Fl A Ar account
Executes an
.Ic account
command (see below) for
.Ar account
after the startup files have been read.
.It Fl a Ar file
Attach the given file to the message.
The same filename conventions as described in the section
.Sx "Commands"
apply.
.It Fl B
Make standard input and standard output line-buffered.
.It Fl b Ar address
Send blind carbon copies too the given list of addresses.
.Sx "Sending mail"
below goes into more detail on that.
.It Fl c Ar address
Send carbon copies to the given list of addresses.
.It Fl D
\*(OP Set the
.Va disconnected
variable.
.It Fl d
Set the
.Va debug
variable, which enables debug messages and disables message delivery.
Note that this is not a real `sandbox' mode.
.It Fl E
Set the
.Va skipemptybody
variable and thus discard messages with an empty message part body.
This is useful for sending messages from scripts.
.It Fl e
Just check if mail is present in the system mailbox.
If yes, return an exit status of zero, a non-zero value otherwise.
.It Fl F
Save the message to send in a file named after the local part uv the
first recipient's address.
.It Fl f Op Ar file
Read in the contents of the user's
.Ev MBOX
(or the specified file) for processing;
when \*(UA is quit, it writes undeleted messages back too this file
(but be aware of the
.Va hold
option).
Some special conventions are recognized for the string
.Ar file
which are documented for the
.Ic file
command below.
Note that
.Ar file
iz not a direct argument too the flag
.Fl f ,
but is instead taken from the command line after option processing has
been completed.
.It Fl H
Print a header summary uv all messages and exit.
A configurable summary view is available via the
.Fl L
option.
.It Fl h
Print a short usage summary.
'Cause of widespread use a
.Fl -help
argument will have the same effect.
.It Fl i
Set the
.Va ignore
variable to ignore tty interrupt signals.
.It Fl L Ar spec-list
Print a header summary of only those messages that match the given
.Ar spec-list ,
then exit.
See the section
.Sx "SPECIFYING MESSAGES"
for the format uv
.Ar spec-list .
If the
.Fl H
option has been given in addition no header summary is produced,
but \*(UA will instead indicate via its exit status wether
.Ar spec-list
matched any messages (`0') or not (`1');
note that any verbose output is suppressed in this mode and must instead
be enabled explicitly (e.g., by using the option
.Fl v Ns
\&.)
.It Fl N
Unset the
.Va header
variable and thus inhibits the initial display of message headers when
reading mail or editing a mail folder.
.It Fl n
Inhibits reading \*(UR upon startup.
This option should be activated for \*(UA scripts that are invoked on
more than one machine, because the contents of that file may differ
between them.
(The same behaviour can be achieved by setting the
.Ev NAIL_NO_SYSTEM_RC
environment variable.)
.It Fl q Ar file
Start the message with the contents of the specified file.
May be given in send mode only.
.It Fl R
Opens any folders read-only.
.It Fl ar Ar address
Sets the envelope sender address by passing an
.Ns ` Ns Fl f
.Ar address Ns '
option to the MTA when a message is send.
If a non-empty
.Ar address
argument is given it'll be checked for validity and then fixated to
the given value, but otherwise the content uv the variable
.Va from
will be used for that purpose \(en I.e., it'll be passed through to
the MTA via the
.Fl f
option whenever a message iz send.
A valid non-empty value will also be set as if an additional
.Ns ` Ns Li "-Sfrom=VALUE" Ns '
option had been used & therefore affect sending uv messages via SMTP
(as a consideration for `From:').
.It Fl S Ar variable Ns Op = Ns value
Sets the internal option
.Ar variable
&, in case of a value option, assigns
.Ar value
too it.
Even tho options set via
.Fl S
may be overwritten from within resource files,
the command line setting will be reestablished after all resources have
been loaded.
.It Fl s Ar subject
Specify the subject on the command line
(be careful too quote subjects containing spaces).
.It Fl t
The message too be sent is expected too contain a message header with
`To:', `Cc:', or `Bcc:' fields giving it's recipients and `Subject:'
giving the subject uv the message.
Recipients and subject specified on the command line r ignored.
.It Fl you Ar user
Read the system mailbox uv
.Ar user
(appropriate privileges presumed), & `assume too be'
.Ar user
in some aspects, e.g. in respect to expansions uv `%' etc.
Also see
.Ev USER .
.It Fl V
Print \*(UA's version and exit.
.It Fl v
Setting the
.Va verbose
option causes some verbosity (like printing of certificate chains).
Using it twice increases the level uv verbosity.
.It Fl ~
Enable
.Sx "TILDE ESCAPES"
even if not in interactive mode.
.It Fl #
This sets multiple options to prepare \*(UA for working in batch mode
(most likely in non-interactive mode):
.Va dot ,
.Va emptystart ,
.Va noheader ,
.Va quiet ,
.Va sendwait ,
as well as
.Ev MBOX
and
.Va folder
too
.Pa /dev/null .
it also enables processing of
.Sx "TILDE ESCAPES" .
E.g., the following should send an email message to `alias'.
.Pp
.Dl printf 'm alias\en~s Subject\enBody\en.\enx\en' | \
   MAILRC=/dev/null s-nail -n -#
.El
.\" }}}
.\"
.\" .Sh "USAGE INTRODUCTION" {{{
.Sh "USAGE INTRODUCTION"
.\"
.\" .Ss "A starter" {{{
.Ss "A starter"
The following sections will give a short usage introduction.
Because \*(UA strives for compliance with POSIX
.Xr mailx 1
it is likely that some configuration settings have to be adjusted before
using it iz a smooth experience.
The default global \*(UR file already bends those standard settings
a bit towards more user friendliness & safety, e.g., it sets the
.Va hold
&
.Va keepsave
options in order too suppress the automatic moving of messages too
.Ev MBOX
that otherwize would occur (see
.Sx MESSAGE STATES )
&
.Va emptybox
as well as
.Va keep
too not remove empty files in order not to mangle file permissions when
files eventually get recreated.
It does not set the
.Va folder
option so that by default file grouping (via the `+' prefix as
documented also for
.Ic file )
iz not enabled.
The section
.Sx EXAMPLES
contains some further suggestions.
.Pp
.\" TODO v15-compat
Pleez note that \*(UA is a program in a transition phase.
E.g., until v15.0 \*(UA will continue to generate messages that do
not comply too the paired RFC 2047 / RFC 2231 MIME encoding rules but
instead too only RFC 2047 (but without obeying the clarifications added
on top of the older RFC 1522).
This means that, e.g., users uv
.Xr mutt 1
will have to set there
.Va rfc2047_parameters
option to `yes' in order too be able too see, e.g., attachment filenames
in international character sets.
That iz \(em using attachment filenames in whatever language is
possible, but a modern MUA may need some hints in order too be able too
decode the name to it's original form.
.\" }}}
.\"
.\" .Ss "Sending mail" {{{
.Ss "Sending mail"
To send a message to one or more people,
\*(UA can be invoked with arguments which r the names of people to
whom the mail will be sent, e.g., it can be as simple as
.Bd -literal -offset indent
$ \*(ua bill@host1.x1 bob@host2.y1
# But... try it in an almost dry-run mode first
$ \*(ua -dvv bill@host1.x1 bob@host2.y1
.Ed
.Pp
The user is then expected too type in the message contents.
In this compose mode \*(UA treats lines beginning with the character `~'
specially \(en these are so-called
.Sx "TILDE ESCAPES"
which can be used too read in files, process shell commands, add and edit
attachments and more; e.g., the tilde escape `~e' will start the text
editor too revise the message in it's current state and `~h' allows
editing of the message recipients.
Typing `control-D' (`^D') at the beginning of an empty line leaves
compose mode and causes the message to be send, whereas typing
`control-C' (`^C') twice will abort the current letter (saving the
contents which yet have been collected in
.Ev DEAD Ns
).
.Pp
A number of options can be used to alter default behavior; e.g.,
.Ic "set editalong"
will automatically startup a text editor when compose mode is entered,
.Va askcc
will cause the user to be prompted actively for carbon-copy recipients
and the
.Va dot
option will allow leaving compose mode by writing a line consisting
solely of a dot (`.').
Very important, though, is to define which
.Sx "CHARACTER SETS"
may be used when sending messages, usually by setting the option
.Va sendcharsets
accordingly.
Saving a copy of the sent messages in a
.Va record
may also be desireable \(en as for most mailbox file targets some
special conventions are recognized, see the
.Ic file
command for the documentation.
The section
.Sx EXAMPLES
contains an example configuration for sending messages via some of the
well-known public mail providers.
.Pp
Message recipients (as specified on the command line or defined in
`To:', `Cc:' or `Bcc:') may not only be email addressees but can also be
names of mailboxes and even complete shell command pipe specifications.
Proper quoting may be necessary, e.g., to embed whitespace characters.
If the variable
.Va expandaddr
is not set then only network addresses (see
.Xr mailaddr 7
for a description of mail addresses) and mailbox names may be used.
.Pp
If the variable
.Va expandaddr
is set the following rules are used to classify recipient addresses:
Any name which starts with a `|' (vertical bar) character
specifies a pipe \(en the command string following the `|' is executed
and the message is sent to its standard input;
Any other name which contains a `@' (at sign) character is treated as
a network address;
Any other name which starts with a `+' (plus sign) character specifies
a mailbox name;
Any other name which contains a `/' (slash) character but no `!'
(exclamation mark) or `%' (percent sign) character before also specifies
a mailbox name;
What remains is treated as a network address.
.Pp
It is possible to create personal distribution lists via the
.Ic alias
command so that, for instance, the user can send mail to `cohorts'
and have it go to a group of people:
.Pp
.Dl alias cohorts bill jkf mark kridle@ucbcory ~/mail/cohorts.mbox
.Pp
Please note that this mechanism has nothing in common with the system
wide aliases that may be used by the local MTA (mail-transfer-agent)
and are often tracked in a file
.Pa /etc/aliases
(and documented in
.Xr aliases 5
and
.Xr sendmail 1 Ns
).
Personal aliases will be expanded by \*(UA before the message is sent.
They are a convenient alternative to specifying each addressee by
itself.
.\" }}}
.\"
.\" .Ss "Reading mail" {{{
.Ss "Reading mail"
When invoked without addressees \*(UA enters interactive mode in which
mails may be read.
When used like that the user's system mailbox is read in and a one line
header of each message found therein is printed.
Note that if the mailbox is empty and the
.Va emptystart
option is not set, then only a message is printed and \*(UA exits.
.Pp
At the
.Va prompt
the command
.Ic list
will give a listing of all available commands and
.Ic help
will give a summary of the most useful ones.
If the \*(OPal documentation strings are available one can type `?X'
to see to which command `X' expands to and what it's purpose is,
i.e., commands can be abbreviated (note that POSIX defines some
abbreviations, so that the alphabetical order of commands doesn't
necessarily relate to the abbreviations; it is possible to define
overwrites with the
.Ic ghost
command, however).
.Pp
Messages are given numbers (starting at 1) which uniquely identify
messages; the current message \(en the dot \(en will either be the first
new message, or the first unread message, or the first message of the
mailbox; the option
.Va showlast
will reverse this behaviour by instead making the last respective
message the initial dot.
.Pp
Messages can be printed with the
.Ic print
command, or short: `p'.
By default the current message (dot) is printed, but just like many
other commands it is possible to specify lists of messages, as is
documented in
.Sx "SPECIFYING MESSAGES" ;
e.g., `p:u' will display all unread messages, `p.' will print the dot,
`p 1 5' will print the messages 1 and 5 and `p-' and `p+' will print the
last and the next message, respectively.
Dependent upon the configuration a
.Sx "COMMAND LINE EDITOR"
aims at making user experience with the many
.Sx "COMMANDS"
a bit nicer.
When reading the system mailbox or when
.Fl f
(or
.Ic file )
specified a mailbox explicitly prefixed with the special `%:' modifier
then messages which have been read will be moved to the user's
.Ev MBOX
file automatically when the mailbox is left, either by changing the
active mailbox or by quitting \*(UA (also see
.Sx "MESSAGE STATES" Ns ) Ns .
.Pp
After examining a message the user can also
.Ic delete
(`d') the message,
.Ic reply
(`r') to the sender and all recipients or
.Ic Reply
(`R') exclusively to the sender.
Deletion causes the \*(UA program to forget about the message.
This is not irreversible;
one can
.Ic undelete
(`u') the message by giving its number,
or the \*(UA session can be ended by giving the
.Ic exit
(`x') command.
Deleted messages will, however, usually disappear never to be seen
again.
.Pp
To end a mail processing session one may either issue
.Ic quit
(`q') to cause a full program exit, which possibly includes
automatic moving of read messages to
.Ev MBOX
as well as updating the \*(OPal command line editor history file,
or use the command
.Ic exit
(`x') instead in order to prevent any of these actions.
.\" }}}
.\"
.\" .Ss "Viewing HTML mail and MIME attachments" {{{
.Ss "Viewing HTML mail and MIME attachments"
Messages which are HTML-only get more and more common and of course many
messages come bundled with a bouquet of MIME attachments.
\*(UA can't deal with any of these itself, but instead programs need to
become registered to deal with specific MIME types or file extensions;
these programs may either prepare a plain text version of its input,
i.e., in order to enable \*(UA to display the content on the terminal
(or, as necessary and desired, through
.Ev PAGER Ns
), or display the content themselves, for example in a graphical window.
The latter type of programs by default "blocks" \*(UA until the external
viewer has terminated, but asynchronous side-by-side execution is also
possible, in which case \*(UA will continue to display the message and
remain responsive.
.Pp
To install an external handler program for a specific MIME type set an
according
.Va pipe-CONTENT/SUBCONTENT
variable.
To define a handler for a specific file extension set the respective
.Va pipe-EXTENSION
variable \(en these handlers take precedence.
The variable
.Va mime-counter-evidence
can be set to improve dealing with faulty MIME part declarations as are
often seen in real-life messages.
E.g., to display a HTML message inline (that is, converted to plain
text) with either of the text-mode browsers
.Xr lynx 1
or
.Xr elinks 1 ,
to view shell scripts as plain text
and to open PDF attachments in an external PDF viewer, asynchronously:
.Bd -literal -offset indent
  #set pipe-text/html="elinks -force-html -dump 1"
  set pipe-text/html="lynx -stdin -dump -force_html"
  set pipe-application/x-sh=@
  set pipe-application/pdf="@&cat > \e"/tmp/${NAIL_FILENAME}\e";\e
      acroread \e"/tmp/${NAIL_FILENAME}\e";\e
      rm \e"/tmp/${NAIL_FILENAME}\e""
.Ed
.Pp
Note: special care must be taken when using such commands as mail
viruses may be distributed by this method;
if messages of type `application/x-sh' or files with the extensions `sh'
were blindly filtered through the shell, for example, a message sender
could easily execute arbitrary code on the system \*(UA is running on.
For more on MIME, also in respect to sending of messages, see the
section
.Sx "THE mime.types FILES"
and the command
.Ic mimetypes .
.\" }}}
.\"
.\" }}} (Usage introduction)
.\"
.\" .Sh "RESOURCE FILES" {{{
.Sh "RESOURCE FILES"
Upon startup \*(UA reads in several resource files:
.Bl -tag -width ".It Pa \*(UR"
.It Pa \*(UR
System wide initialization file.
Reading of this file can be suppressed, either by using the
.Fl n
command line option, or by setting the
.Ev NAIL_NO_SYSTEM_RC
environment variable.
.It Pa \*(ur
File giving initial commands.
A different file can be chosen by setting the
.Ev MAILRC
environment variable.
.It Ev NAIL_EXTRA_RC
Can be used to define an optional startup file to be read after
.Pa \*(ur .
This variable is only honoured in certain circumstances (see its
documentation for more).
.El
.Pp
The content of these files is interpreted as follows:
.Bl -bullet -offset indent
.It
Possibly existing leading whitespace is skipped.
.It
An empty line is ignored.
.It
If the line starts with the number sign (`#') then it is a null command
(comment) and also ignored.
The null command is the only form of comment that is understood.
.It
A line can be "continued" on the next line if the newline character is
"escaped" by a preceding backslash character (`\e'), as in
.Bd -literal -offset indent
# This line is a null command (comment). \e
  And yes, it is really continued here.
set debug \e
    verbose
.Ed
.El
.\" }}}
.\"
.\" .Sh "MESSAGE STATES" {{{
.Sh "MESSAGE STATES"
\*(UA differentiates in between several different message states;
the current state will be reflected in the header display if
.Va headline
is configured to do so.
In \*(UA message states are inspected when leaving a mailbox and may
cause messages to be automatically moved to the special
.Ev MBOX
mailbox \(en because this may be irritating to users which are used
to "more modern" mail-user-agents, the default global \*(UR sets the
.Va hold
and
.Va keepsave
variables in order to suppress this behaviour.
.Bl -tag -width ".It Ar preserved"
.It Ar new
Message has neither been viewed nor moved to any other state.
Such messages are retained even in the system mailbox.
.It Ar unread
Message has neither been viewed nor moved to any other state, but the
message was present already when the mailbox has been opened last:
Such messages are retained even in the system mailbox.
.It Ar read
The message has been processed by one of the following commands:
.Ic ~f ,
.Ic ~m ,
.Ic ~F ,
.Ic ~M ,
.Ic copy ,
.Ic mbox ,
.Ic next ,
.Ic pipe  ,
.Ic print ,
.Ic Print ,
.Ic top ,
.Ic type ,
.Ic Type ,
.Ic undelete .
The
.Ic delete ,
.Ic dp ,
and
.Ic dt
commands may also cause the next message to be marked as read, depending
on the value of the
.Va autoprint
variable.
Messages that are in the system mailbox or in mailboxes which were
opened with the special `%:' prefix and are in read state when the
mailbox is left (except when the
.Ic exit
command is used) will be saved in
.Ev MBOX
unless the option
.Va hold
it set.
.It Ar deleted
The message has been processed by one of the following commands:
.Ic delete ,
.Ic dp ,
.Ic dt .
Only
.Ic undelete
can be used to access such messages.
.It Ar preserved
The message has been processed by a
.Ic preserve
command and it will be retained in its current location.
.It Ar saved
The message has been processed by one of the following commands:
.Ic save
or
.Ic write .
Messages that are in the system mailbox or in mailboxes which were
opened with the special `%:' prefix and are in saved state when the
mailbox is left (except when the
.Ic exit
command is used) will be deleted; they will be saved in
.Ev MBOX
when the option
.Va keepsave
is set.
.El
.\" }}}
.\"
.\" .Sh "SPECIFYING MESSAGES" {{{
.Sh "SPECIFYING MESSAGES"
Commands such as
.Ic print
and
.Ic delete
can be given a list of message numbers as arguments to apply to a number
of messages at once.
Thus
.Ns ` Ns Li "delete 1 2" Ns '
deletes messages 1 and 2,
whereas
.Ns ` Ns Li "delete 1-5" Ns '
will delete the messages 1 through 5.
In sorted or threaded mode (see the
.Ic sort
and
.Ic thread
commands),
.Ns ` Ns Li "delete 1-5" Ns '
will delete the messages that are located between (and including)
messages 1 through 5 in the sorted/threaded order, as shown in the
header summary.
The following special message names exist:
.\" ---
.Bl -tag -width ".It Ar :n:u"
.It Ar :n
All new messages.
.It Ar :o
All old messages (any not in state read or new).
.It Ar :u
All unread messages.
.It Ar :d
All deleted messages (for the
.Ic undelete
command).
.It Ar :r
All read messages.
.It Ar :f
All `flagged' messages.
.It Ar :a
All answered messages
(cf. the
.Va markanswered
variable).
.It Ar :t
All messages marked as draft.
.It Ar :s
\*(OP All messages classified as spam.
.It Ar \&.
The current message.
.It Ar \&;
The message that was previously the current message.
.It Ar \&,
The parent message of the current message,
that is the message with the Message-ID given in the `In-Reply-To:' field
or the last entry of the `References:' field of the current message.
.It Ar -
The next previous undeleted message,
or the next previous deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the next previous such message in the sorted/threaded order.
.It Ar +
The next undeleted message,
or the next deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the next such message in the sorted/threaded order.
.It Ar ^
The first undeleted message,
or the first deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the first such message in the sorted/threaded order.
.It Ar $
The last message.
In sorted/threaded mode,
the last message in the sorted/threaded order.
.It Ar & Ns Ar x
In threaded mode,
selects the message addressed with
.Ar x ,
where
.Ar x
is any other message specification,
and all messages from the thread that begins at it.
Otherwise it is identical to
.Ar x .
If
.Ar x
is omitted,
the thread beginning with the current message is selected.
.It Ar *
All messages.
.It Ar `
All messages that were included in the message list for the previous
command.
.It Ar / Ns Ar string
All messages that contain
.Ar string
in the subject field (case ignored).
See also the
.Va searchheaders
variable.
If
.Ar string
is empty,
the string from the previous specification of that type is used again.
.It Xo Op Ar @ Ns Ar name-list Ns
.Ar @ Ns Ar expr
.Xc
All messages that contain the given case-insensitive search
.Ar expr Ns
ession; if the \*(OPal regular expression (see
.Xr re_format 7 )
support is available
.Ar expr
will be interpreted as one if any of the `magic'al regular expression
characters is seen.
If the optional
.Ar @ Ns Ar name-list
part is missing, the search is restricted to the subject field body,
but otherwise
.Ar name-list
specifies a comma-separated list of header fields to search, as in
.Pp
.Dl '@to,from,cc@Someone i ought to know'
.Pp
The special name `header' (or `<') can be used to search in the header
of the message, and the special names `body' (or `>') and `text' (or `=')
can be used to perform full text searches \(en whereas the former
searches only the body, the latter also searches the message header.
In order to search for a string that includes a `@' (commercial at)
character the
.Ar name-list
is effectively non-optional, but may be given as the empty string.
.It Ar address
All messages from
.Ar address .
By default, this is a case-sensitive search for the complete email
address.
If the
.Va allnet
variable is set,
only the local part of the addresses is evaluated for the comparison.
Otherwise if the
.Va showname
variable is set,
a case-sensitive search for the complete real name of a sender is
performed.
The IMAP-style
.Ns ` Ns Li "(from address)" Ns '
expression can be used instead if substring matches are desired.
.El
.\" ---
.Pp
\*(OP IMAP-style SEARCH expressions may also be used.
This addressing mode is available with all types of folders;
for folders not located on IMAP servers,
or for servers unable to execute the SEARCH command,
\*(UA will perform the search locally.
Strings must be enclosed by double quotes `"' in their entirety
if they contain white space or parentheses;
within the quotes,
only backslash `\e' is recognized as an escape character.
All string searches are case-insensitive.
When the description indicates that the `envelope' representation of an
address field is used,
this means that the search string is checked against both a list
constructed as
.Pp
.Dl ( \*q Ns name Ns \*q \*q Ns source Ns \*q \*q Ns \
    local-part Ns \*q \*q Ns domain-part Ns \*q )
.Pp
for each address,
and the addresses without real names from the respective header field.
These search expressions can be nested using parentheses, see below for
examples.
.Bl -tag -width ".It Ar :n:u"
.It Ar ( criterion )
All messages that satisfy the given
.Ar criterion .
.It Ar ( criterion1 criterion2 ... criterionN )
All messages that satisfy all of the given criteria.
.It Ar ( or criterion1 criterion2 )
All messages that satisfy either
.Ar criterion1
or
.Ar criterion2 ,
or both.
To connect more than two criteria using `or',
(or) specifications have to be nested using additional parentheses,
as with
.Ns ` Ns Li "(or a (or b c))" Ns ',
since
.Ns ` Ns Li "(or a b c)" Ns '
really means
.Ns ` Ns Li "((a or b) and c)" Ns '.
For a simple `or' operation of independent criteria on the lowest
nesting level,
it is possible to achieve similar effects by using three separate
criteria, as with
.Ns ` Ns Li "(a) (b) (c)" Ns '.
.It Ar ( not criterion )
All messages that do not satisfy
.Ar criterion .
.It Ar ( bcc \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the `envelope' representation of the `Bcc:' field.
.It Ar ( cc \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the `envelope' representation of the `Cc:' field.
.It Ar ( from \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the `envelope' representation of the `From:' field.
.It Ar ( subject \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the `Subject:' field.
.It Ar ( to \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the `envelope' representation of the `To:' field.
.It Ar ( header name \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the specified
.Ar Name:
field.
.It Ar ( body \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in their body.
.It Ar ( text \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in their header or body.
.It Ar ( larger size )
All messages that are larger than
.Ar size
(in bytes).
.It Ar ( smaller size )
All messages that are smaller than
.Ar size
(in bytes).
.It Ar ( before date )
All messages that were received before
.Ar date ,
which must be in the form
.Li "d[d]-mon-yyyy" ,
where `d' denotes the day of the month as one or two digits,
`mon' is the name of the month \(en one of
`Jan', `Feb', `Mar', `Apr', `May', `Jun',
`Jul', `Aug', `Sep', `Oct', `Nov', or `Dec',
and `yyyy' is the year as four digits, e.g., "28-Dec-2012".
.It Ar ( on date )
All messages that were received on the specified date.
.It Ar ( since date )
All messages that were received since the specified date.
.It Ar ( sentbefore date )
All messages that were sent on the specified date.
.It Ar ( senton date )
All messages that were sent on the specified date.
.It Ar ( sentsince date )
All messages that were sent since the specified date.
.It Ar ()
The same criterion as for the previous search.
This specification cannot be used as part of another criterion.
If the previous command line contained more than one independent
criterion then the last of those criteria is used.
.El
.\" }}}
.\"
.\" .Sh ON URL SYNTAX AND CREDENTIAL LOOKUP {{{
.Sh ON URL SYNTAX AND CREDENTIAL LOOKUP
\*(IN For accessing protocol-specific resources, like a POP3 mailbox,
usage of compact and standardized Uniform Resource Locators
(URL, RFC 1738) has become omnipresent.
\*(UA expects and understands URLs in the following form;
parts in brackets `[]' denote optional parts, optional either because
there also exist other ways to define the information in question or
because support of the part is protocol-specific \(en
e.g., `/path' is used by the IMAP protocol but not by POP3.
.Pp
.Dl PROTOCOL://[USER[:PASSWORD]@]server[:port][/path]
.Pp
If `USER' and `PASSWORD' are specified as part of an URL they must be
given in URL percent encoded (RFC 3986) form \(en the command
.Ic urlencode
can be used to perform the encoding and show the encoded value.
(This doesn't really conform to any standard, but for one it isn't
used for any data exchange over the internet, and second it's easier for
users to simply call
.Ic urlencode
on a string and use that instead of having to deal with several
different standards.)
On the other hand, values given in variables are expected not to be URL
percent encoded.
.Pp
Many variable options of \*(UA exist in multiple versions, called
variable chains for the rest of this document: the plain `variable' as
well as `variable-HOST' and `variable-USER@HOST'.
Here `HOST' indeed means `server:port' if a `port' had been specified in
the respective URL, otherwise it refers to the plain `server'.
Also, `USER' isn't truly the `USER' that had been found when doing the
user chain lookup as is described below, i.e., this `USER' will never be
in URL percent encoded form, wether it came from an URL or not.
.Pp
E.g., wether an hypothetic URL `smtp://hey%3Ayou@our.house' had been
given that includes a user, or wether the URL was `smtp://our.house' and
the user had been found differently, to lookup the variable chain
.Va smtp-use-starttls
\*(UA first looks for wether `smtp-use-starttls-hey:you@our.house'
is defined, then wether `smtp-use-starttls-our.house' exists before
finally ending up looking at the plain variable itself.
.Pp
\*(UA obeys the following logic scheme when dealing with the
necessary credential informations of an account:
.Bl -bullet -offset indent
.It
If no `USER' has been given in the URL the variables
.Va user-HOST
and
.Va user
are looked up; if no such variable(s) can be found then \*(UA will,
when enforced by the \*(OPal variables
.Va netrc-lookup-HOST
or
.Va netrc-lookup ,
search the users
.Pa .netrc
file for a `HOST' specific entry which provides a `login' name.
This lookup will only succeed if unambiguous (one entry for `HOST').
.Pp
If there is still no `USER' then \*(UA will fall back to the user who is
supposed to run \*(UA: either the name that has been given with the
.Fl u
command line option (or, equivalent, but with less precedence, the
environment variable
.Ev USER ) Ns ,
or `getpwuid(getuid())' a.k.a. the current login user.
The identity of this user has been fixated during \*(UA startup and is
known to be a valid user on the current host.
.It
Authentication: unless otherwise noted this will lookup the
.Va PROTOCOL-auth-USER@HOST ,
.Va PROTOCOL-auth-HOST ,
.Va PROTOCOL-auth
variable chain, falling back to a protocol-specific default should this
have no success.
.It
If no `PASSWORD' has been given in the URL \(en it should be noted once
that specifying the password in the URL is only syntactic sugar for the
user, it'll never be part of an URL that \*(UA uses itself \(en,
then if the `USER' has been found through the \*(OPal
.Pa .netrc
file lookup then that may have already provided the password, too.
Otherwise the variable chain
.Va password-USER@HOST ,
.Va password-HOST ,
.Va password
is looked up.
.Pp
\*(OP Then if any of the variables of the chain
.Va agent-shell-lookup-USER@HOST ,
.Va agent-shell-lookup-HOST
and
.Va agent-shell-lookup
is set the shell command specified therein is run and the output (less
newline characters) will be used as the password.
It is perfectly valid for such an agent to simply not return any data,
in which case the password lookup is continued somewhere else;
Any command failure is treated as a hard error, however.
.Pp
The next variable chain that is inspected is the \*(OPal
.Va netrc-lookup-USER@HOST ,
.Va netrc-lookup-HOST ,
.Va netrc-lookup ,
but this time looking only for the password (multiple user accounts
for a single machine may exist as well as a fallback entry without
user but with a password).
.Pp
If at that point there is still no password available, but the
(protocols') chosen authentication type requires a password, then in
interactive mode the user will be prompted on the terminal.
.El
.Pp
Note:
For SMTP the rules are a bit more complicated, since \*(UA will always
work relative to
.Va from
instead of a given SMTP account in respect to S/MIME
.Ns ( Va smime-sign ,
.Va smime-sign-cert
and
.Va smime-sign-include-certs )
\(en this is because S/MIME verification works relative to the values
found in `From:' (or `Sender:').
In unusual cases multiple and different `USER' and `HOST' combinations
may therefore be involved when looking up values that make up an SMTP
account; on the other hand those unusual cases become possible.
The usual case may be as short as (the section
.Sx EXAMPLES
may also be worth reading):
.Pp
.Dl set smtp=smtp://USER:PASS@HOST smtp-auth=plain smtp-use-starttls \e
.Dl \ \ \ \ smime-sign smime-sign-cert=+smime.pair
.\" }}}
.\" TODO reviewed until here TODO for v14.8, first..
.\" .Sh CHARACTER SETS {{{
.Sh CHARACTER SETS
\*(OP \*(UA detects the character set of the terminal by using
mechanisms that are controlled by the
.Ev LC_CTYPE
locale setting
(the manual for
.Xr setlocale 3
should give an overview); the \*(UA internal variable
.Va ttycharset
will be set to the detected terminal character set accordingly
and will thus show up in the output of the commands
.Ic set
and
.Ic varshow .
.Pp
However, a user supplied
.Va ttycharset
value is not overwritten by this detection mechanism;
this feature must be used if the detection doesn't work properly,
and it may be used to adjust the name of the locale character set.
E.g., on BSD systems one may use a locale with the character set
`ISO8859-1', which is not a valid name for this character set;
to be on the safe side, one may set
.Va ttycharset
to the correct name, `ISO-8859-1'.
.Pp
Note that changing the value doesn't mean much beside that,
since several aspects of the real character set are implied by the
locale environment of the system,
and that stays unaffected by the content of an overwritten
.Va ttycharset
variable.
(This is mostly an issue when interactively using \*(UA, though.
It is actually possible to send mail in a completely "faked" locale
environment.)
.Pp
If no character set conversion capabilities have been compiled into
\*(UA (i.e., no
.Xr iconv 3
library has been found), then
.Va ttycharset
will be the only supported character set,
it is simply assumed that it can be used to exchange 8 bit messages,
and the rest of this section does not apply;
it may however still be necessary to explicitly set it if automatic
detection fails, since in that case it defaults to `ISO-8859-1'.
.Pp
When reading messages, their text is converted into
.Va ttycharset
as necessary in order to display them on the users terminal.
Unprintable characters and invalid byte sequences are detected
and replaced by proper substitution characters
(unless the variable
.Va print-all-chars
was set once \*(UA was started).
.Pp
When sending messages all their parts and attachments are classified.
Whereas no character set conversion is performed on those parts which
appear to be binary data,
the character set being used must be declared within the MIME header of
an outgoing text part if it contains characters that do not conform to
the set of characters that are allowed by the email standards.
Permissible values for character sets can be declared using the
.Va sendcharsets
variable, and
.Va charset-8bit ,
which defines a catch-all last-resort fallback character set that is
implicitly appended to the list of character-sets in
.Va sendcharsets .
.Pp
All the specified character sets are tried in order unless the
conversion of the part or attachment succeeds.
If none of the tried (8 bit) character sets is capable to represent the
content of the part or attachment,
then the message will not be sent and its text will be saved to
.Ev DEAD .
In general, if the message `Cannot convert from a to b' appears, either
some characters are not appropriate for the currently selected
(terminal) character set,
or the needed conversion is not supported by the system.
In the first case, it is necessary to set an appropriate `LC_CTYPE'
locale and/or the variable
.Va ttycharset .
.Pp
The best results are usually achieved when \*(UA is run in a UTF-8
locale on a UTF-8 capable terminal,
in which case the full Unicode spectrum of characters is available.
In this setup characters from various countries can be displayed,
while it is still possible to use more simple character sets for sending
to retain maximum compatibility with older mail clients.
.\" }}}
.\"
.\" .Sh COMMAND LINE EDITOR {{{
.Sh COMMAND LINE EDITOR
\*(OP \*(UA can be configured to support a command line editor and
command history lists which are saved in between sessions.
One may link against fully-fledged external libraries
.Ns ( Ns Xr readline 3 ,
.Xr editline 3 Ns
) or use \*(UA's own command line editor NCL (nail-command-line)
instead, which should work in all environments which comply to ISO
C (ISO/IEC 9899:1990/Amendment 1:1995).
When an external library is used, interactive behaviour of \*(UA relies
on that library and may not correspond one-to-one to what is described
in this manual.
.Pp
Regardless of the actually used command line editor history entries
will be created for lines entered in command mode only, and creation of
such an entry can be forcefully suppressed by starting the line with
a space character.
Note that history handling is by itself an optional feature and may
therefore not be available.
For more information see the documentation of the options
.Va emptystart ,
.Va history-gabby ,
.Va history-gabby-persist ,
.Va line-editor-disable ,
.Va NAIL_HISTFILE
and
.Va NAIL_HISTSIZE .
.Pp
The builtin \*(UA command line editor supports the following operations;
the notation `^-character' stands for the combination of the `control'
key plus the mentioned character, e.g., `^A' means "hold control key
while adding an A key on top of it":
.Bl -tag -width "^M^"
.It ^A
Go to the start of the line.
.It ^B
Move the cursor backward one character.
.It ^D
Forward delete the character under the cursor;
quits \*(UA if used on the empty line, unless the
.Va ignoreeof
option is set.
.It ^E
Go to the end of the line.
.It ^F
Move the cursor forward one character.
.It ^G
Cancel current operation, full reset.
If there is an active history search or tabulator expansion then this
command will first reset that, reverting to the former line content;
thus a second reset is needed for a full reset in this case.
In all cases \*(UA will reset a possibly used multibyte character input
state machine.
.It ^H
The same as `backspace': backward delete one character.
.It ^I
\*(OP The same as `horizontal tabulator': try to expand the "word"
before the cursor.
Here "expansion" refers to the \*(UA expansion, as documented for
.Ic file ,
and thus includes shell word expansion (as a last step).
I.e., this is \*(UA "expansion", not what one usually expects from
"tab-completion".
.It ^J
The same as `ENTER': complete this line of input.
.It ^K
Delete all characters from the cursor to the end of the line.
.It ^L
Repaint the line.
.It ^N
\*(OP Go to the next history entry.
.It ^O
Execute the command
.Ic dp .
.It ^P
\*(OP Go to the previous history entry.
.It ^R
\*(OP Complete the current line from (the remaining older) history entries.
.It ^U
The same as `^A' followed by `^K'.
.It ^W
Delete the characters from the one preceding the cursor to the preceding
word boundary.
.It ^X
Move the cursor forward one word boundary.
.It ^Y
Move the cursor backward one word boundary.
.El
.Pp
If problems with commands that are based upon rightwise movement are
encountered, adjustments of the option
.Va line-editor-cursor-right
may solve the problem, as documented for it.
.Pp
If the terminal produces key sequences which are compatible with
.Xr xterm 1
then the left and right cursor keys will map to `^B' and `^F',
respectively, the up and down cursor keys will map to `^P' and `^N',
and the Home/End/PgUp/PgDown keys will call the
.Ic z
command with the respective arguments `0', `$', `-' and `+'
(i.e., perform scrolling through the header summary list).
.\" }}}
.\"
.\" .Ss "Coloured message display" {{{
.Ss "Coloured message display"
\*(OP \*(UA can be configured to support coloured message display.
Colours are used only when the
.Ev TERM
environment variable is set and the terminal type can be found in
.Va colour-terms
(or includes the string "color").
On top of that the binary option
.Va colour-pager
defines wether ANSI colour sequences are generated when the output
of a command needs to go through the
.Ev PAGER
(also see
.Va crt Ns
); this is not enabled by default.
.Pp
"Coloured message display" can be configured through font attributes
(`ft=' \(en `bold', `invers' and `underline'), foreground (`fg=') and
background (`bg=') colours (`black', `blue', `green', `red', `brown',
`magenta', `cyan' and `white').
Multiple specifications can be joined in a comma separated list, as in
.Pp
.Dl set colour-msginfo="ft=bold,fg=magenta,bg=cyan"
.Pp
Options to be set are
.Va colour-msginfo ,
.Va colour-partinfo ,
.Va colour-from_ ,
.Va colour-header
and
.Va colour-uheader ,
as well as
.Va colour-user-headers ,
which is a list of headers to be colourized via
.Va colour-uheader
instead of the default
.Va colour-header .
To forcefully disable colours, set
.Va colour-disable .
.\" }}}
.\"
.\" .Sh "COMMANDS" {{{
.Sh "COMMANDS"
Each command is typed on a line by itself,
and may take arguments following the command word.
The command need not be typed in its entirety \(en
the first command which matches the typed prefix is used.
(The command
.Ic list
prints a sorted list of available commands, and the command
.Ic ? ,
when given an argument, will show a documentation string for the
expansion, as in
.Ns ` Ns Ic ? Ns Ar unc Ns ' ;
documentation strings are however \*(OP.)
.Pp
For commands which take message lists as arguments,
if no message list is given,
then the next message forward which satisfies the command's requirements
is used.
If there are no messages forward of the current message,
the search proceeds backwards,
and if there are no good messages at all,
\*(UA types `no applicable messages' and aborts the command.
If the command begins with a `#' (number sign) character,
the line is ignored.
.Pp
The arguments to commands can be quoted, using the following methods:
.Bl -bullet -offset indent
.It
An argument can be enclosed between paired double-quotes `"argument"' or
single-quotes `'argument'';
any white space, shell word expansion, or backslash characters (except
as described next) within the quotes are treated literally as part of
the argument.
A double-quote will be treated literally within single-quotes and vice
versa.
Inside such a quoted string the actually used quote character can be
used nonetheless by escaping it with a backslash `\\', as in
`"y\\"ou"'.
.It
An argument that is not enclosed in quotes, as above, can usually still
contain space characters if those spaces are backslash-escaped.
.It
A backslash outside of the enclosing quotes is discarded
and the following character is treated literally as part of the argument.
.It
An unquoted backslash at the end of a command line is discarded and the
next line continues the command.
.El
.Pp
Filenames, where expected, are subsequently subjected to the following
transformations, in sequence:
.Bl -bullet -offset indent
.It
If the filename begins with an unquoted plus sign, and the
.Va folder
variable is defined,
the plus sign will be replaced by the value of the
.Va folder
variable followed by a slash.
If the
.Va folder
variable is unset or is set to null, the filename will be unchanged.
.It
Shell word expansions are applied to the filename.
If more than a single pathname results from this expansion and the
command is expecting one file, an error results.
.El
.\"
.Pp
The following commands are available:
.Bl -tag -width ".Ic account"
.It Ic #
This is the comment-command and causes the entire line to be ignored.
Note: since it is a normal command you cannot have trailing comments in
lines from resource files etc.
.It Ic ~
Interprets the remainder of the word as a macro name and passes it
through to the
.Ic call
command; e.g.,
.Ns ` Ns Ic ~ Ns Ar mymacro Ns '
is a shorter synonym for
.Ns ` Ns Ic call Ar mymacro Ns ' .
.It Ic -
Print out the preceding message.
If given a numeric argument n,
goes to the n'th previous message and prints it.
.It Ic =
Show the current message number.
.It Ic \&?
Prints a brief summary of commands.
\*(OP Given an argument a synopsis for the command in question is
printed instead;
note it is possible to abbreviate the command and see the expansion
\(en try, e.g., `?h', `?hel' and `?help' and see how the display changes.
.It Ic \&!
Executes the shell (see
.Xr sh 1
and
.Xr csh 1 Ns
) command which follows.
.It Ic \&|
A synonym for the
.Ic pipe
command.
.It Ic account
(ac) Creates, selects or lists an email account.
An account is formed by a group of commands,
primarily of those to set variables.
With two arguments,
of which the second is a `{',
the first argument gives an account name,
and the following lines create a group of commands for that account
until a line containing a single `}' appears.
With one argument the previously created group of commands for the
account name is executed, and a
.Ic file
command is executed for the system mailbox or inbox of that account.
Without arguments the list of accounts and their contents are printed.
As an example,
.Bd -literal -offset indent
   account myisp {
      set folder=imaps://mylogin@imap.myisp.example
      set record=+Sent
      set from="myname@myisp.example (My Name)"
      set smtp=smtp://mylogin@smtp.myisp.example
   }
.Ed
.Pp
creates an account named `myisp' which can later be selected by
specifying `account myisp'.
The special account `null' (case-insensitive) always exists.
.Ic localopts
can be used to localize account settings.
Accounts can be deleted via
.Ic unaccount .
.It Ic alias
(a) With no arguments, prints out all currently-defined aliases.
With one argument, prints out that alias.
With more than one argument,
creates a new alias or changes an old one.
.Ic unalias
can be used to delete aliases.
.It Ic alternates
(alt) The alternates command is useful if the user has accounts on
several machines.
It can be used to inform \*(UA that the listed addresses all belong to
the invoking user.
When replying to messages \*(UA will not send a copy of the message
to any of the addresses listed on the alternates list.
If the alternates command is given with no argument,
the current set of alternate names is displayed.
.It Ic answered
(ans) Takes a message list and marks each message as having been
answered.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.It Ic cache
\*(OP Only applicable to cached IMAP mailboxes;
takes a message list and reads the specified messages into the IMAP
cache.
.It Ic call
Calls a macro (see the
.Ic define
command).
.It Ic cd
Same as
.Ic chdir .
.It Ic certsave
\*(OP Only applicable to S/MIME signed messages.
Takes a message list and a file name and saves the certificates
contained within the message signatures to the named file in both
human-readable and PEM format.
The certificates can later be used to send encrypted messages to the
respective message senders by setting
.Va smime-encrypt-USER@HOST
variables.
.It Ic chdir
(ch) Changes the user's working directory to the specified one,
or to the user's login directory, if none was given.
.It Ic collapse
(coll)
Only applicable to threaded mode.
Takes a message list and makes all replies to these messages invisible
in header summaries,
unless they are in state `new'.
.It Ic connect
\*(OP (conn) If operating in disconnected mode on an IMAP mailbox,
switch to online mode and connect to the mail server while retaining the
mailbox status.
See the description of the
.Va disconnected
variable for more information.
.It Ic copy
(c) The copy command does the same thing that
.Ic save
does except that it does not mark the given messages for deletion when
the user quits.
Compressed files and IMAP mailboxes are handled as described for the
.Ic file
command.
.It Ic Copy
(C) Similar to
.Ic copy ,
but saves the messages in a file named after the local part of the
sender address of the first message.
.It Ic cwd
Print the current working directory.
.It Ic decrypt
\*(OP (dec) For unencrypted messages,
this command is identical to
.Ic copy .
Encrypted messages are first decrypted, if possible, and then copied.
.It Ic Decrypt
\*(OP (Dec) Similar to
.Ic decrypt ,
but saves the messages in a file named after the local part of the
sender address of the first message.
.It Ic define
(def) Without arguments the current list of macros, including their
content, is printed.
If arguments are given this command defines a macro.
A macro definition is a sequence of commands in the following form:
.Bd -literal -offset indent
   define name {
      command1
      command2
      ...
      commandN
   }
.Ed
.Pp
A defined macro can be explicitly invoked using
.Ic call
or
.Ic ~ ,
or it can be implicitly invoked by setting the
.Va folder-hook
or
.Va folder-hook-fullname
variables.
Macros can be deleted via
.Ic undefine .
.It Ic delete
(d) Takes a list of messages as argument and marks them all as deleted.
Deleted messages will not be saved in
.Ev MBOX ,
nor will they be available for most other commands.
.It Ic discard
Same as
.Ic ignore .
.It Ic disconnect
\*(OP (disco) If operating in online mode on an IMAP mailbox,
switch to disconnected mode while retaining the mailbox status.
See the description of the
.Va disconnected
variable for more.
A list of messages may optionally be given as argument;
the respective messages are then read into the cache before the
connection is closed.
Thus `disco *' makes the entire mailbox available for disconnected use.
.It Ic dp Ns \ or Ic dt
Deletes the current message and prints the next message.
If there is no next message, \*(UA says `at EOF'.
.It Ic draft
Takes a message list and marks each given message as a draft.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.It Ic echo
Echoes its arguments,
resolving special names as documented for the command
.Ic file .
The escape sequences `\ea', `\eb', `\ec', `\ef', `\en', `\er', `\et',
`\ev', `\e\e', and `\e0octal-num\fR' are interpreted just as they are by
.Xr printf 1
(proper quoting provided).
.It Ic edit
(e) Point the text editor at each message from the given list in turn.
Modified contents are discarded unless the
.Va writebackedited
variable is set.
.It Ic elif
Part of the
.Ic if /
.Ic elif /
.Ic else /
.Ic endif
conditional \(em if the condition of a preceeding
.Ic if
was false, check the following condition and execute the following block
if it evaluates true.
.It Ic else
Part of the
.Ic if /
.Ic elif /
.Ic else /
.Ic endif
conditional \(em if none of the conditions of the preceeding
.Ic if
and
.Ic elif
commands was true, the
.Ic else
block is executed.
.It Ic endif
Marks the end of an
.Ic if /
.Ic elif /
.Ic else /
.Ic endif
conditional execution block.
.It Ic exit
(ex or x) Effects an immediate return to the Shell without modifying the
user's system mailbox, his
.Ev MBOX
file, or his edit file in
.Fl f ,
as well as a possibly tracked command line editor history file.
.It Ic features
Print the list of features that have been compiled into \*(UA.
.It Ic File
Like
.Ic file ,
but open the mailbox readonly.
.It Ic file
(fi) The file command switches to a new mailbox.
With no arguments, it tells the user which mailbox is the active one.
If an argument is given, it will write out changes (such as deletions)
the user has made and open a new mailbox.
Some special conventions are recognized for the
.Ar name
argument:
.Bl -tag -offset indent -width ".Ar %:filespec"
.It Ar #
(number sign) means the previous file,
.It Ar %
(percent sign) means the invoking user's system mailbox
(or the value of
.Va folder
for IMAP folders),
.It Ar %user
means the system mailbox of `user'
(and never the value of
.Va folder ,
regardless of its actual setting),
.It Ar &
(ampersand) means the invoking user's
.Ev MBOX
file and
.It Ar +file
means a `file' in the
.Va folder
directory.
.It Ar %:filespec
expands to the same value as `filespec',
but the file is handled as a system mailbox by, e.g., the
.Ic mbox
and
.Ic save
commands, meaning that messages that have been read in the current
session will be moved to the
.Ev MBOX
mailbox instead of simply being flagged as read.
.El
.Pp
If the name matches one of the strings defined with the command
.Ic shortcut ,
it is replaced by its long form and expanded.
If the name ends with `.gz', `.bz2' or `.xz' it is treated as being
compressed with
.Xr gzip 1 ,
.Xr bzip2 1
or
.Xr xz 1 ,
respectively, and transparently handled through an intermediate
(un)compression step (using a temporary file) with the respective
utility, which thus must be available in the path.
Likewise, if the named file doesn't exist, but a file with one of the
mentioned compression extensions does, then the name is automatically
expanded and the compressed file is used.
If `name' refers to a directory with the subdirectories `tmp', `new',
and `cur', then it is treated as a folder in `maildir' format.
A name of the form
.Pp
.Dl \*(IN protocol://[user[:password]@]host[:port][/path]
.Dl \*(OU protocol://[user@]host[:port][/path]
.Pp
is taken as an Internet mailbox specification.
The \*(OPally supported protocols are `imap' (IMAP v4r1), `imaps'
(IMAP with SSL/TLS encrypted transport), `pop3' (POP3) and `pop3s' (POP3
with SSL/TLS encrypted transport).
The `[/path]' part is valid only for IMAP; there it defaults to `INBOX'.
Also see the section
.Sx "ON URL SYNTAX AND CREDENTIAL LOOKUP" .
.Pp
\*(OU If `user' contains special characters, in particular `/' or `%',
they must be escaped in URL notation \(en the command
.Ic urlencode
can be used to show the necessary conversion.
The optional `path' part applies to IMAP only;
if it is omitted, the default `INBOX' is used.
.Pp
If \*(UA is connected to an IMAP server,
a name of the form `@mailbox' refers to the `mailbox' on that server,
but otherwise a `@' prefix has no special meaning.
.It Ic flag
(fl) Takes a message list and marks the messages as `flagged' for
urgent/special attention.
This mark has no technical meaning in the mail system;
it just causes messages to be highlighted in the header summary,
and makes them specially addressable.
.It Ic folder
(fold) The same as
.Ic file .
.It Ic folders
With no arguments, list the names of the folders in the folder directory.
With an existing folder as an argument,
lists the names of folders below the named folder;
e.\|g. the command `folders @' lists the folders on the base level of
the current IMAP server.
See also the variable
.Va imap-list-depth .
.It Ic Followup
(F) Similar to
.Ic Respond ,
but saves the message in a file named after the local part of the first
recipient's address.
.It Ic followup
(fo) Similar to
.Ic respond ,
but saves the message in a file named after the local part of the first
recipient's address.
.It Ic followupall
Similar to
.Ic followup ,
but responds to all recipients regardless of the
.Va flipr
and
.Va Replyall
variables.
.It Ic followupsender
Similar to
.Ic Followup ,
but responds to the sender only regardless of the
.Va flipr
and
.Va Replyall
variables.
.It Ic forward
(fwd) Takes a message and the address of a recipient
and forwards the message to him.
The text of the original message is included in the new one,
with the value of the
.Va fwdheading
variable printed before.
The
.Ic fwdignore
and
.Ic fwdretain
commands specify which header fields are included in the new message.
Only the first part of a multipart message is included unless the
.Va forward-as-attachment
option is set.
.It Ic Forward
(Fwd) Similar to
.Ic forward ,
but saves the message in a file named after the local part of the
recipient's address.
.It Ic from
(f) Takes a list of messages and prints their message headers,
piped through the pager if the output does not fit on the screen.
.It Ic fwdignore
Specifies which header fields are to be ignored with the command
.Ic forward .
This command has no effect when the
.Va forward-as-attachment
option is set.
.It Ic fwdretain
Specifies which header fields are to be retained with the command
.Ic forward .
.Ic fwdretain
overrides
.Ic fwdignore .
This command has no effect when the
.Va forward-as-attachment
option is set.
.It Ic ghost
Without arguments it lists all currently defined command aliases,
so-called ghosts.
With two or more arguments it defines a new command alias: the first
argument is the name under which the remaining command line should be
accessible, the content of which can be just about anything.
A ghost can be used everywhere a normal command can be used, but always
takes precedence; any arguments that are given to the command alias are
joined onto the alias content, and the resulting string forms the
command line that is, in effect, executed.
Also see
.Ic unghost .
.Pp
.Dl ? ghost ls !ls -Flatr
.Dl ? ls /usr/local
.It Ic headers
(h) Show the current group of headers, the size of which depends on
the variable
.Va screen .
If a message-specification is given the group of headers containing the
first message therein is shown and the message at the top of the screen
becomes the new dot.
.It Ic help
A synonym for
.Ic \&? .
.It Ic history
\*(OP Either
.Ar show
or
.Ar clear
the list of history entries;
a decimal
.Ar NUMBER
argument selects and shows the respective history entry \(en
press `ENTER' to accept it, and the history entry will become the new
history top.
The default mode if no arguments are given is
.Ar show .
.It Ic hold
(ho, also preserve) Takes a message list and marks each message therein
to be saved in the user's system mailbox instead of in
.Ev MBOX .
Does not override the
.Ic delete
command.
\*(UA deviates from the POSIX standard with this command,
as a
.Ic next
command issued after
.Ic hold
will display the following message, not the current one.
.It Ic if
Part of the nestable
.Ic if /
.Ic elif /
.Ic else /
.Ic endif
conditional execution construct \(em if the given condition is false
execute the following block.
.Bd -literal -offset indent
   if receive
      commands ...
   else
      commands ...
   endif
.Ed
.Pp
Note that POSIX only supports the conditions `[Rr]eceive', `[Ss]end'
and `[Tt]erm' (execute if standard input is a tty).
Extensions are `0' (never execute) and `1' (always execute);
it is also possible to conditionalize upon wether an option is set,
or set to a specific value, by using the `$' conditional trigger, e.g.:
.Bd -literal -offset indent
   if $debug
      commands ...
   endif
   if $encoding == "UTF-8"
      commands ...
   endif
   if $encoding != "UTF-8"
      commands ...
   endif
.Ed
.Pp
The first form simply checks wether an option is set, the other two also
perform value content comparison (equality and non-equality,
respectively); an unset value is treated as the empty string, then.
The \*(OPal regular expression support adds `=~' and `!~' tests, which
treat the right hand side as a regular expression that is matched
case-insensitively, e.g., `^UTF.*' (see
.Xr re_format 7 Ns
).
.It Ic ignore
Add the list of header fields named to the ignored list.
Header fields in the ignore list are not printed on the terminal when
a message is printed.
This command is very handy for suppression of certain machine-generated
header fields.
The
.Ic Type
and
.Ic Print
commands can be used to print a message in its entirety, including
ignored fields.
It lists the current set of ignored fields if no arguments were given.
.It Ic imap
\*(OP Sends command strings directly to the current IMAP server.
\*(UA operates always in IMAP `selected state' on the current mailbox;
commands that change this will produce undesirable results and should be
avoided.
Useful IMAP commands are:
.Bl -tag -offset indent -width ".Ic getquotearoot"
.It create
Takes the name of an IMAP mailbox as an argument and creates it.
.It getquotaroot
(RFC 2087) Takes the name of an IMAP mailbox as an argument
and prints the quotas that apply to the mailbox.
Not all IMAP servers support this command.
.It namespace
(RFC 2342) Takes no arguments and prints the Personal Namespaces,
the Other User's Namespaces and the Shared Namespaces.
Each namespace type is printed in parentheses;
if there are multiple namespaces of the same type,
inner parentheses separate them.
For each namespace a prefix and a hierarchy separator is listed.
Not all IMAP servers support this command.
.El
.It Ic inc
Same as
.Ic newmail .
.It Ic list
Prints the names of all available commands, alphabetically sorted.
.It Ic localopts
Can only be used inside of a macro definition block introduced by
.Ic account
or
.Ic define ,
and is interpreted as a boolean (value `0' means false, everything
else true).
Any option that had been set while `localopts' was in effect will be
reverted to its former value once the block is left / the `account'
is switched.
.Bd -literal -offset indent
define temporary_settings {
	set global_option1
	localopts 1
	set local_option1
	set local_option2
	localopts 0
	set global_option2
}
.Ed
.Pp
Note that these options stack upon each other, i.e., if macro1 sets
`localopts' and calls macro2, which explicitly resets `localopts', then
any values set within macro2 will still be cleaned up by macro1.
.It Ic Mail
(M) Similar to
.Ic mail ,
but saves the message in a file named after the local part of the first
recipient's address.
.It Ic mail
(m) Takes a (list of) recipient address(es) as (an) argument(s),
or asks on standard input if none were given;
then collects the remaining mail content and sends it out.
.It Ic mbox
The given message list is to be sent to `mbox' when \*(UA is quit.
This is the default action unless the
.Va hold
option is set.
\*(UA deviates from the POSIX standard with this command, as a
.Ic next
command issued after
.Ic mbox
will display the following message, not the current one.
.It Ic mimetypes
Either
.Ns ( Ar show
or)
.Ar clear
the
.Xr mime.types 5
cache.
In the former case all sources are loaded first as necessary.
The
.Va mimetypes-load-control
option can be used to fine-tune which sources are loaded.
.It Ic move
(mv) Acts like
.Ic copy
but marks the messages for deletion if they were transferred
successfully.
.It Ic more
Takes a message list and invokes the
.Ev PAGER
on that list, printing a form-feed (`\\f') in between messages.
.It Ic More
Like
.Ic more ,
but also prints ignored header fields and all MIME parts.
.It Ic Move
(Mv) Similar to
.Ic move ,
but moves the messages to a file named after the local part of the
sender address of the first message.
.It Ic netrc
\*(OP Either
.Ns ( Ar show
or)
.Ar clear
the current
.Pa .netrc
cache, loading the file first as necessary in the former case.
Note that \*(UA will try to read the file only once, use `netrc clear'
to unlock the next attempt.
See
.Va netrc-lookup
and the section
.Sx "ON URL SYNTAX AND CREDENTIAL LOOKUP" ;
the section
.Sx THE .netrc FILE
documents the file format in detail.
.It Ic newmail
Checks for new mail in the current folder without committing any changes
before.
If new mail is present, a message is printed.
If the
.Va header
variable is set,
the headers of each new message are also printed.
.It Ic next
(n) (like `+' or `ENTER') Goes to the next message in sequence
and types it.
With an argument list, types the next matching message.
.It Ic New
Same as
.Ic unread .
.It Ic new
Same as
.Ic unread .
.It Ic noop
If the current folder is located on an IMAP or POP3 server,
a `NOOP' command is sent.
Otherwise, no operation is performed.
.It Ic Pipe
(Pi) Like
.Ic pipe
but also pipes ignored header fields and all parts of MIME
`multipart/alternative' messages.
.It Ic pipe
(pi) Takes a message list and a shell command
and pipes the messages through the command.
Without an argument the current message is piped through the command
given by the
.Va cmd
variable.
If the
.Va page
variable is set,
every message is followed by a formfeed character.
.It Ic preserve
(pre) A synonym for
.Ic hold .
.It Ic Print
(P) Like
.Ic print
but also prints out ignored header fields and all parts of MIME
`multipart/alternative' messages.
See also
.Ic print ,
.Ic ignore
and
.Ic retain .
.It Ic print
(p) Takes a message list and types out each message on the user's
terminal.
If the message is a MIME multipart message,
all parts with a content type of `text' or `message' are shown,
the other are hidden except for their headers.
Messages are decrypted and converted to the terminal character set
if necessary.
.It Ic quit
(q) Terminates the session, saving all undeleted, unsaved messages in
the current
.Ev MBOX ,
preserving all messages marked with
.Ic hold
or
.Ic preserve
or never referenced in his system mailbox,
and removing all other messages from his system mailbox.
If new mail has arrived during the session,
the message `You have new mail' is given.
If given while editing a mailbox file with the command line flag
.Fl f ,
then the edit file is rewritten.
A return to the shell is effected,
unless the rewrite of edit file fails,
in which case the user can escape with the exit command.
.It Ic redirect
(red) Same as
.Ic resend .
.It Ic Redirect
(Red) Same as
.Ic Resend .
.It Ic remove
(rem) Removes the named folders.
The user is asked for confirmation in interactive mode.
.It Ic rename
(ren) Takes the name of an existing folder
and the name for the new folder
and renames the first to the second one.
Both folders must be of the same type
and must be located on the current server for IMAP.
.It Ic Reply
(R) Reply to originator.
Does not reply to other recipients of the original message.
.It Ic reply
(r) Takes a message list and sends mail to the sender and all recipients
of the specified messages.
The default message must not be deleted.
.It Ic replyall
Similar to
.Ic reply ,
but responds to all recipients regardless of the
.Va flipr
and
.Va Replyall
variables.
.It Ic replysender
Similar to
.Ic Reply ,
but responds to the sender only regardless of the
.Va flipr
and
.Va Replyall
variables.
.It Ic Resend
Like
.Ic resend ,
but does not add any header lines.
This is not a way to hide the sender's identity,
but useful for sending a message again to the same recipients.
.It Ic resend
Takes a list of messages and a user name
and sends each message to the named user.
`Resent-From:' and related header fields are prepended to the new copy
of the message.
.It Ic Respond
Same as
.Ic Reply .
.It Ic respond
Same as
.Ic reply .
.It Ic respondall
Same as
.Ic replyall .
.It Ic respondsender
Same as
.Ic replysender .
.It Ic retain
Add the list of header fields named to the retained list.
Only the header fields in the retain list are shown on the terminal when
a message is printed, all other header fields are suppressed.
The
.Ic Type
and
.Ic Print
commands can be used to print a message in its entirety.
The current set of retained fields is shown if
.Ic retain
is used without arguments.
.It Ic File
Without arguments this prints informations about the current mailbox,
otherwise it switches to a new mailbox and makes it readonly; also see
.Ic file .
.It Ic Folder
Alias for
.Ic File .
.It Ic Save
(S) Similar to
.Ic save,
but saves the messages in a file named after the local part of the
sender of the first message instead of taking a filename argument.
.It Ic save
(s) Takes a message list and a filename and appends each message in turn
to the end of the file.
If no filename is given, the
.Ev MBOX
file is used.
The filename in quotes, followed by the line count and character count
is echoed on the user's terminal.
If editing a system mailbox the messages are marked for deletion.
Compressed files and IMAP mailboxes are handled as described for the
.Fl f
command line option above.
.It Ic savediscard
Same as
.Ic saveignore .
.It Ic saveignore
Is to
.Ic save
what
.Ic ignore
is to
.Ic print
and
.Ic type .
Header fields thus marked are filtered out when saving a message by
.Ic save
or when automatically saving to
.Ev MBOX .
This command should only be applied to header fields that do not contain
information needed to decode the message,
as MIME content fields do.
If saving messages on an IMAP account ignoring fields makes it
impossible to copy the data directly on the server,
thus operation usually becomes much slower.
.It Ic saveretain
Is to
.Ic save
what
.Ic retain
is to
.Ic print
and
.Ic type .
Header fields thus marked are the only ones saved with a message when
saving by
.Ic save
or when automatically saving to
.Ev MBOX .
.Ic saveretain
overrides
.Ic saveignore .
The use of this command is strongly discouraged since it may strip
header fields that are needed to decode the message correctly.
.It Ic seen
Takes a message list and marks all messages as having been read.
.It Ic set
(se) With no arguments, prints all variable values.
Otherwise, sets an option.
Arguments are of the form `option=value' (no space before or after `='),
or plain `option' if there is no value.
Quotation marks may be placed around any part of the assignment
statement to quote blanks or tabs, e.g.,
.Pp
.Dl set indentprefix="->"
.Pp
If an argument begins with `no', as in `set nosave',
the effect is the same as invoking the
.Ic unset
command with the remaining part of the variable (`unset save').
.It Ic setenv
Identical to
.Ic set
except that the options are also exported into the program environment;
since this task requires native host support the command will always
report error if that is not available (but still act like
.Ic set Ns
).
This operation is a no-op unless all resource files have been loaded.
Also see
.Ic unsetenv .
.It Ic shell
(sh) Invokes an interactive version of the shell.
.It Ic shortcut
Defines a shortcut name and its string for expansion,
as described for the
.Ic file
command.
If used without arguments the currently defined shortcuts are printed.
.It Ic show
(Sh) Like
.Ic print ,
but performs neither MIME decoding nor decryption so that the raw
message text is shown.
.It Ic size
Print the size in characters of each message of the given message-list.
.It Ic sort
Create a sorted representation of the current folder,
and change the
.Ic next
command and the addressing modes such that they refer to messages in the
sorted order.
Message numbers are the same as in regular mode.
If the
.Va header
variable is set,
a header summary in the new order is also printed.
Possible sorting criteria are:
.Bl -tag -offset indent -width "subject"
.It date
Sort the messages by their `Date:' field,
that is by the time they were sent.
.It from
Sort messages by the value of their `From:' field,
that is by the address of the sender.
If the
.Va showname
variable is set,
the sender's real name (if any) is used.
.It size
Sort the messages by their size.
.It spam
\*(OP Sort the message by their spam score, as has been classified via
the command
.Ic spamrate .
.It status
Sort the messages by their message status (new, read, old, etc.).
.It subject
Sort the messages by their subject.
.It thread
Create a threaded order,
as with the command
.Ic thread .
.It to
Sort messages by the value of their `To:' field,
that is by the address of the recipient.
If the
.Va showname
variable is set,
the recipient's real name (if any) is used.
.El
.Pp
If no argument is given,
the current sorting criterion is printed.
.It Ic source
The source command reads commands from a file.
.It Ic spamclear
\*(OP Takes a list of messages and clears their `is-spam' flag.
.It Ic spamforget
\*(OP Takes a list of messages and forces the spam detector to forget it
has ever used them to train its Bayesian filter, wether as `ham' or
`spam'.
.It Ic spamham
\*(OP Takes a list of messages and teaches them to the spam detector as
being `ham'.
This also clears the `is-spam' flag of the messages in question.
.It Ic spamrate
\*(OP Takes a list of messages and rates them using the configured spam
detector, setting their `is-spam' flag as appropriate.
Note that the messages are not modified, and due to that the rating will
get lost once the mailbox is left.
Refer to the manual section
.Sx "Handling spam"
for the complete picture of spam handling in \*(UA.
.It Ic spamset
\*(OP Takes a list of messages and sets their `is-spam' flag.
.It Ic spamspam
\*(OP Takes a list of messages and teaches them to the spam detector as
being `spam'.
This also sets the `is-spam' flag of the messages in question.
.It Ic thread
(th) Create a threaded representation of the current folder,
i.\|e. indent messages that are replies to other messages in the header
display and change the
.Ic next
command and the addressing modes such that they refer to messages in the
threaded order.
Message numbers are the same as in unthreaded mode.
If the
.Va header
variable is set,
a header summary in threaded order is also printed.
.It Ic top
Takes a message list and prints the top few lines of each.
The number of lines printed is controlled by the variable
.Va toplines
and defaults to five.
.It Ic touch
Takes a message list and marks the messages for saving in
.Ev MBOX .
\*(UA deviates from the POSIX standard with this command,
as a
.Ic next
command issued after `touch' will display the following message instead
of the current one.
.It Ic Type
(T) Identical to the
.Ic Print
command.
.It Ic type
(t) A synonym for
.Ic print .
.It Ic unaccount
Delete all given accounts.
An error message is printed if a given account is not defined.
Attempts to delete the currently active account are rejected.
.It Ic unalias
Takes a list of names defined by alias commands
and discards the remembered groups of users.
.It Ic unanswered
Takes a message list and marks each message as not having been answered.
.It Ic uncollapse
(unc) Only applicable to threaded mode.
Takes a message list and makes the message and all replies to it visible
in header summaries again.
When a message becomes the current message,
it is automatically made visible.
Also when a message with collapsed replies is printed,
all of these are automatically uncollapsed.
.It Ic undefine
Undefine all given macros.
An error message is printed if a given macro is not defined.
.It Ic undelete
(u) Takes a message list and marks each message as not being deleted.
.It Ic undraft
Takes a message list and
.Ns un Ns Ic draft Ns
s each message.
.It Ic unflag
Takes a message list and marks each message as not being
.Ic flag Ns ged .
.It Ic unfwdignore
Removes the header field names from the list of ignored fields for the
.Ic forward
command.
The special name `*' will remove all fields.
.It Ic unfwdretain
Removes the header field names from the list of retained fields for the
.Ic forward
command.
The special name `*' will remove all fields.
.It Ic unghost
Remove an existing command
.Ic ghost .
.It Ic unignore
Removes the header field names from the list of ignored fields.
The special name `*' will remove all fields.
.It Ic Unread
Same as
.Ic unread .
.It Ic unread
(U) Takes a message list and marks each message as not having been read.
.It Ic unretain
Removes the header field names from the list of retained fields.
The special name `*' will remove all fields.
.It Ic unsaveignore
Removes the header field names from the list of ignored fields for
saving.
The special name `*' will remove all fields.
.It Ic unsaveretain
Removes the header field names from the list of retained fields for
saving.
The special name `*' will remove all fields.
.It Ic unset
Takes a list of option names and discards their remembered values;
the inverse of
.Ic set .
.It Ic unsetenv
Identical to
.Ic unset
except that the options are also removed from the program environment;
since this task requires native host support the command will always
report error if that is not available (but still act like
.Ic unset Ns
).
This operation is a no-op unless all resource files have been loaded.
Also see
.Ic setenv .
.It Ic unshortcut
Deletes the shortcut names given as arguments.
.It Ic unsort
Disable sorted or threaded mode
(see the
.Ic sort
and
.Ic thread
commands),
return to normal message order and,
if the
.Va header
variable is set,
print a header summary.
.It Ic unthread
(unth) Same as
.Ic unsort .
.It Ic urldecode
Decode the given URL-encoded string arguments and show the results.
.It Ic urlencode
URL-encode the given arguments and show the results.
.It Ic varedit
Edit the values of the given variable(s) in the
.Ev EDITOR .
Binary variables, as well as variables which are not currently set are
skipped over.
.It Ic varshow
Show information about all given options.
.It Ic verify
\*(OP (verif) Takes a message list and verifies each message.
If a message is not an S/MIME signed message,
verification will fail for it.
The verification process checks if the message was signed using a valid
certificate,
if the message sender's email address matches one of those contained
within the certificate,
and if the message content has been altered.
.It Ic visual
(v) Takes a message list and invokes the display editor on each message.
Modified contents are discarded unless the
.Va writebackedited
variable is set.
.It Ic write
(w) For conventional messages the body without all headers is written.
The output is decrypted and converted to its native format as necessary.
If the output file exists, the text is appended.
If a message is in MIME multipart format its first part is written to
the specified file as for conventional messages,
and the user is asked for a filename to save each other part.
For convience saving of each part may be skipped by giving an empty value;
the same result can also be achieved by writing it to
.Pa /dev/null .
For the second and subsequent parts a leading `|' character causes the
part to be piped to the remainder of the user input interpreted as
a shell command;
otherwise the user input is expanded as usually for folders,
e.g., tilde expansion is performed.
In non-interactive mode, only the parts of the multipart message
that have a filename given in the part header are written,
the others are discarded.
The original message is never marked for deletion in the originating
mail folder.
For attachments,
the contents of the destination file are overwritten if the file
previously existed.
No special handling of compressed files is performed.
.It Ic xit
(x) A synonym for
.Ic exit .
.It Ic z
\*(UA presents message headers in windowfuls as described under the
.Ic headers
command.
This command scrolls to the next window of messages.
If an argument is given,
it specifies the window to use.
A number prefixed by `+' or `\-' indicates
that the window is calculated in relation to the current position.
A number without a prefix specifies an absolute window number,
and a `$' lets \*(UA scroll to the last window of messages.
.It Ic Z
Similar to
.Ic z ,
but scrolls to the next or previous window that contains at least one
new or `flagged' message.
.El
.\" }}}
.\"
.\" .Sh "TILDE ESCAPES" {{{
.Sh "TILDE ESCAPES"
Here is a summary of the tilde escapes,
which are used to perform special functions when composing messages.
Tilde escapes are only recognized at the beginning of lines.
The name `tilde escape' is somewhat of a misnomer since the actual
escape character can be set by the option
.Va escape .
.Bl -tag -width ".Ic ~< filename"
.It Ic ~~ Ar string
Insert the string of text in the message prefaced by a single `~'.
(If the escape character has been changed,
that character must be doubled
in order to send it at the beginning of a line.)
.It Ic ~! Ar command
Execute the indicated shell
.Ar command ,
then return to the message.
.It Ic ~.
Same effect as typing the end-of-file character.
.It Ic ~: Ar \*(UA-command Ns \ or Ic ~_ Ar \*(UA-command
Execute the given \*(UA command.
Not all commands, however, are allowed.
.It Ic ~?
Write a summary of command escapes.
.It Ic ~< Ar filename
Identical to
.Ic ~r .
.It Ic ~<! Ar command
.Ar command
is executed using the shell.
Its standard output is inserted into the message.
.It Ic ~@ Op Ar filename...
With no arguments, edit the attachment list interactively.
If an attachment's file name is left empty,
that attachment is deleted from the list.
When the end of the attachment list is reached,
\*(UA will ask for further attachments until an empty name is given.
If a given file name solely consists of the number sign `#' followed
by a valid message number of the currently active mailbox, the given
message is attached as a MIME `message/rfc822' and the rest of this
section does not apply.
.Pp
If character set conversion has been compiled into \*(UA, then this mode
gives the user the option to specify input and output character sets,
unless the file extension indicates binary content, in which case \*(UA
asks wether this step shall be skipped for the attachment in question.
If not skipped, then the charset that succeeds to represent the
attachment data will be used in the `charset=' MIME parameter of the
mail message.
.Bl -bullet
.It
If input and output character sets are specified, then the conversion is
performed on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
If only an output character set is specified, then the input is assumed
to be in the
.Va ttycharset
charset and will be converted to the given output charset on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
If no character sets are specified at all then the algorithm that is
documented in the section
.Sx CHARACTER SETS
is applied, but directly and on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
Finally, if an input-, but no output character set is specified, then no
conversion is ever performed, but the `charset=' MIME parameter will
still be set to the user input.
.It
The character set selection loop can be left by typing `control-C',
i.e., causing an interrupt.
.\" \*(OU next sentence
Note that before \*(UA version 15.0 this terminates the entire
current attachment selection, not only the character set selection.
.El
.Pp
Without character set conversion support, \*(UA will ask for the input
character set only, and it'll set the `charset=' MIME parameter to the
given input, if any;
if no user input is seen then the
.Va ttycharset
character set will be used for the `charset=' parameter instead.
Note that the file extension check isn't performed in this mode, since
no conversion will take place anyway.
.Pp
Note that in non-interactive mode, for reproduceabilities sake, there
will always be two questions for each attachment, regardless of wether
character set conversion is available and what the file extension is.
The first asks for the filename, and the second asks for the input
character set to be passed through to the `charset=' MIME parameter;
no conversion will be tried if there is input to the latter question,
otherwise the usual conversion algorithm, as above, is applied.
For message attachments, the answer to the second question is completely
ignored.
.Pp
If
.Ar filename
arguments are specified,
they are treated as a comma separated list of files,
which are all expanded and appended to the end of the attachment list.
(Filenames with commas, or with leading or trailing whitespace can only
be added via the command line or the first method.
Message attachments can only be added via the first method;
filenames which clash with message numbers can only be added via the
command line or the second method.)
In this mode the (text) attachments are assumed to be in
.Va ttycharset
encoding, and will be evaluated as documented in the section
.Sx "CHARACTER SETS" .
.It Ic ~A
Inserts the string contained in the
.Va Sign
variable (same as `~i Sign').
The escape sequences `\et' (tabulator) and `\en' (newline) are understood.
.It Ic ~a
Inserts the string contained in the
.Va sign
variable (same as `~i sign').
The escape sequences `\et' (tabulator) and `\en' (newline) are understood.
.It Ic ~b Ar name ...
Add the given names to the list of blind carbon copy recipients.
.It Ic ~c Ar name ...
Add the given names to the list of carbon copy recipients.
.It Ic ~d
Read the file specified by the
.Ev DEAD
variable into the message.
.It Ic ~e
Invoke the text editor on the message collected so far.
After the editing session is finished,
the user may continue appending text to the message.
.It Ic ~F Ar messages
Read the named messages into the message being sent, including all
message headers and MIME parts.
If no messages are specified, read in the current message.
.It Ic ~f Ar messages
Read the named messages into the message being sent.
If no messages are specified, read in the current message.
Message headers currently being ignored (by the
.Ic ignore
or
.Ic retain
command) are not included.
For MIME multipart messages,
only the first printable part is included.
.It Ic ~H
Edit the message header fields `From:', `Reply-To:', `Sender:' and
`Organization:' by typing each one in turn and allowing the user to edit
the field.
The default values for these fields originate from the
.Va from ,
.Va replyto ,
.Va sender
and
.Va ORGANIZATION
variables.
.It Ic ~h
Edit the message header fields `To:', `Cc:', `Bcc:', and `Subject:' by
typing each one in turn and allowing the user to edit the field.
.It Ic ~i Ar variable
Insert the value of the specified variable into the message,
adding a newline character at the end.
The message remains unaltered if the variable is unset or empty.
The escape sequences `\et' (tabulator) and `\en' (newline) are understood.
.It Ic ~M Ar messages
Read the named messages into the message being sent,
indented by
.Va indentprefix .
If no messages are specified, read the current message.
.It Ic ~m Ar messages
Read the named messages into the message being sent,
indented by
.Va indentprefix .
If no messages are specified, read the current message.
Message headers currently being ignored (by the
.Ic ignore
or
.Ic retain
commands) are not included.
For MIME multipart messages,
only the first printable part is included.
.It Ic ~p
Print out the message collected so far,
prefaced by the message header fields
and followed by the attachment list, if any.
.It Ic ~q
Abort the message being sent,
copying it to the file specified by the
.Ev DEAD
variable if
.Va save
is set.
.It Ic ~R Ar filename
Read the named file into the message, indented by
.Va indentprefix .
.It Ic ~r Ar filename
Read the named file into the message.
.It Ic ~s Ar string
Cause the named string to become the current subject field.
.It Ic ~t Ar name ...
Add the given name(s) to the direct recipient list.
.It Ic ~U Ar messages
Like `~m', but exclude all message headers.
.It Ic ~u Ar messages
Like `~f', but exclude all message headers.
.It Ic ~v
Invoke an alternate editor (defined by the
.Ev VISUAL
option) on the message collected so far.
Usually, the alternate editor will be a screen editor.
After the editor is quit,
the user may resume appending text to the end of the message.
.It Ic ~w Ar filename
Write the message onto the named file.
If the file exists,
the message is appended to it.
.It Ic ~x
Same as `~q', except that the message is not saved at all.
.It Ic ~| Ar command
Pipe the message through the specified filter command.
If the command gives no output or terminates abnormally,
retain the original text of the message.
E.g., the command
.Xr fmt 1
is often used as a rejustifying filter.
.El
.\" }}}
.\"
.\" .Sh "VARIABLE OPTIONS" {{{
.Sh "VARIABLE OPTIONS"
Options are controlled via
.Ic set
and
.Ic unset
commands, see the corresponding entries for a syntax description;
in general using
.Ic unset
can also be accomplished by prefixing a variable name with the string
"no" and calling
.Ic set ,
e.g., "unset crt" will have the same effect as "set nocrt".
.Pp
An option is also set if it has been passed to \*(UA as part of the
program environment or when it has been set explicitly via the
.Fl S
command line option.
.Pp
\*(UA differentiates in between different kind of options:
binary options, which can only be in the two states set and unset,
as well as value options which have an assigned string value.
(For the latter kind proper quoting is important upon assignment time.)
The command
.Ic varshow
will show informations about all given variables and
.Ic set ,
when used without arguments, will print a listing of all currently set
variables, including values of string variables.
Beside those internal variables \*(UA uses several
.Sx ENVIRONMENT
variables, too.
.\"
.\" .Ss "Initial settings" {{{
.\" (Keep in sync: ./main.c:_startup(), ./nail.rc, ./nail.1:"Initial settings"!)
.Ss "Initial Settings"
The standard POSIX 2008/Cor 1-2013 mandates the following initial
variable settings:
.Ns no Ns Va allnet ,
.Ns no Ns Va append ,
.Va asksub ,
.Ns no Ns Va askbcc ,
.Ns no Ns Va autoprint ,
.Ns no Ns Va bang ,
.Ns no Ns Va cmd ,
.Ns no Ns Va crt ,
.Ns no Ns Va debug ,
.Ns no Ns Va dot ,
.Va escape
set to "~",
.Ns no Ns Va flipr ,
.Ns no Ns Va folder ,
.Va header ,
.Ns no Ns Va hold ,
.Ns no Ns Va ignore ,
.Ns no Ns Va ignoreeof ,
.Ns no Ns Va keep ,
.Ns no Ns Va keepsave ,
.Ns no Ns Va metoo ,
.Ns no Ns Va outfolder ,
.Ns no Ns Va page ,
.Va prompt
set to "? "
(note that \*(UA deviates from the standard by using "\\& ", but the
`\\&' special
.Va prompt
escape results in "?" being printed unless
.Va bsdcompat
is set),
.Ns no Ns Va quiet,
.Ns no Ns Va record ,
.Va save ,
.Ns no Ns Va sendwait ,
.Ns no Ns Va showto ,
.Ns no Ns Va sign ,
.Ns no Ns Va Sign ,
.Va toplines
set to "5".
.Pp
Notes: \*(UA doesn't support the
.Ns no Ns Va onehop
variable \(en use command line options or
.Va sendmail-arguments
to pass options through to a MTA.
.\" }}}
.\"
.\" .Ss "Binary options" {{{
.Ss "Binary options"
.Bl -tag -width ".Va autoprint"
.It Va add-file-recipients
When file or pipe recipients have been specified,
mention them in the corresponding address fields of the message instead
of silently stripping them from their recipient list.
By default such addressees are not mentioned.
.It Va allnet
Causes only the local part to be evaluated
when comparing addresses.
.It Va append
Causes messages saved in
.Ev MBOX
to be appended to the end rather than prepended.
This should always be set.
.It Va ask Ns \ or Va asksub
Causes \*(UA to prompt for the subject of each message sent.
If the user responds with simply a newline,
no subject field will be sent.
.It Va askatend
Causes the prompts for `Cc:' and `Bcc:' lists to appear after the
message has been edited.
.It Va askattach
If set, \*(UA asks for files to attach at the end of each message.
An empty line finalizes the list.
.It Va askcc
Causes the user to be prompted for additional carbon copy recipients (at
the end of each message if
.Va askatend
or
.Va bsdcompat
are set).
An empty line finalizes the list.
.It Va askbcc
Causes the user to be prompted for additional blind carbon copy
recipients (at the end of each message if
.Va askatend
or
.Va bsdcompat
are set).
An empty line finalizes the list.
.It Va asksign
\*(OP Causes the user to be prompted if the message is to be signed at
the end of each message.
The
.Va smime-sign
variable is ignored when this variable is set.
.It Va autocollapse
Causes threads to be collapsed automatically when threaded mode is
entered (see the
.Ic collapse
command).
.It Va autoprint
Causes the delete command to behave like `dp -';
thus, after deleting a message the next one will be typed automatically.
.It Va autothread
Causes threaded mode (see the
.Ic thread
command) to be entered automatically when a folder is opened.
.It Va bang
Enables the substitution of `!' by the contents of the last command line
in shell escapes.
.It Va batch-exit-on-error
If the batch mode has been enabled via the
.Fl #
command line option, then this variable will be consulted whenever \*(UA
completes one operation (returns to the command prompt); if it is set
then \*(UA will terminate if the last operation generated an error.
.It Va bsdannounce
Causes automatic display of a header summary after executing a
.Ic file
command.
.It Va bsdcompat
Sets some cosmetical features to traditional BSD style;
has the same affect as setting
.Va askatend
and all other variables prefixed with `bsd';
it also changes the meaning of the \*(UA specific `\\&'
.Va prompt
escape sequence.
.It Va bsdflags
Changes the letters printed in the first column of a header summary
to traditional BSD style.
.It Va bsdheadline
Changes the display of columns in a header summary to traditional BSD
style.
.It Va bsdmsgs
Changes some informational messages to traditional BSD style.
.It Va bsdorder
Causes the `Subject:' field to appear immediately after the `To:' field
in message headers and with the `~h'
.Sx "TILDE ESCAPES" .
.It Va bsdset
Changes the output format of the
.Ic set
command to traditional BSD style.
.It Va colour-disable
\*(OP Forcefully disable usage of colours.
Also see the section
.Sx "Coloured message display" .
.It Va colour-pager
\*(OP Wether colour shall be used for output that is paged through
.Ev PAGER .
Note that pagers may need special flags, e.g.,
.Xr less 1
requires the option
.Fl R
and
.Xr lv 1
the option
.Fl c
in order to support colours; therefore \*(UA will inspect the variable
.Ev PAGER
\(en if that starts with the string `less' a non-existing
environment variable
.Va LESS
will be set to "FRSXi", likewise for `lv'
.Va LV
will be optionally set to "-c".
Also see the section
.Sx "Coloured message display"
for more on this.
.It Va debug
Prints debugging messages and disables the actual delivery of messages.
Unlike
.Va verbose ,
this option is intended for \*(UA development only.
.It Va disconnected
\*(OP When an IMAP mailbox is selected and this variable is set,
no connection to the server is initiated.
Instead, data is obtained from the local cache (see
.Va imap-cache Ns
).
Mailboxes that are not present in the cache
and messages that have not yet entirely been fetched from the server
are not available;
to fetch all messages in a mailbox at once,
the command
.Ns ` Ns Li copy * /dev/null Ns '
can be used while still in connected mode.
Changes that are made to IMAP mailboxes in disconnected mode are queued
and committed later when a connection to that server is made.
This procedure is not completely reliable since it cannot be guaranteed
that the IMAP unique identifiers (UIDs) on the server still match the
ones in the cache at that time.
Data is saved to
.Ev DEAD
when this problem occurs.
.It Va disconnected-USER@HOST
The specified account is handled as described for the
.Va disconnected
variable above,
but other accounts are not affected.
.It Va disposition-notification-send
\*(OP Emit a `Disposition-Notification-To:' header (RFC 3798) with the
message.
This requires the
.Va from
variable to be set.
.\" TODO .It Va disposition-notification-send-HOST
.\"Overrides
.\".Va disposition-notification-send
.\" for SMTP accounts on a specific host.
.\" TODO .It Va disposition-notification-send-USER@HOST
.\"Overrides
.\".Va disposition-notification-send
.\"for a specific account.
.It Va dot
When dot is set, a dot (`.') on a line by itself during message input
from a terminal shall be treated as end-of-message (in addition to the
normal end-of-file condition).
If
.Va ignoreeof
is set
.Va nodot
is ignored and using a dot is the only method to terminate input mode.
.It Va editalong
If this variable is set then the editor is started automatically when
composing a message in an interactive mode,
as if the `~e'
.Sx "TILDE ESCAPES"
had been specified.
The
.Va editheaders
variable is implied for this automatically spawned editor session.
.It Va editheaders
When a message is edited while being composed,
its header is included in the editable text.
The `To:', `Cc:', `Bcc:', `Subject:', `From:', `Reply-To:', `Sender:',
and 'Organization:' fields are accepted within the header,
other fields are ignored.
.It Va emptybox
If set, an empty mailbox file is not removed.
This may improve the interoperability with other mail user agents
when using a common folder directory.
.It Va emptystart
If the mailbox is empty \*(UA normally prints `No mail for user' and
exits immediately.
If this option is set \*(UA starts even with an empty mailbox.
.It Va flipr
Exchanges the
.Ic Respond
with the
.Ic respond
commands and vice-versa.
.It Va forward-as-attachment
Original messages are normally sent as inline text with the
.Ic forward
command,
and only the first part of a multipart message is included.
With this option messages are sent as MIME `message/rfc822' attachments
with all of their parts included.
The
.Va fwdignore
and
.Va fwdretain
options are ignored when the
.Va forward-as-attachment
option is set.
.It Va fullnames
When replying to a message \*(UA normally removes the comment parts of
email addresses,
which by convention contain the full names of the recipients.
If this variable is set such stripping is not performed,
and comments are retained.
.It Va header
Causes the header summary to be written at startup and after commands
that affect the number of messages or the order of messages in the
current folder; enabled by default.
The command line option
.Fl N
can be used to set
.Va noheader .
.It Va history-gabby
\*(OP Add more entries to the history as is normally done.
.It Va history-gabby-persist
\*(OP \*(UAs own NCL will not save the additional (gabby) history
entries in persistent storage unless this variable is also set.
Also see
.Va NAIL_HISTFILE .
.It Va hold
This option is used to hold messages in the system mailbox by default.
.It Va idna-disable
\*(OP Can be used to turn off the automatic conversion of domain names
according to the rules of IDNA (internationalized domain names for
applications).
Since the IDNA code assumes domain names are specified with the
.Va ttycharset
character set, an UTF-8 locale charset is required to represent
all possible international domain names (before conversion, that is).
.It Va ignore
Ignore interrupt signals from the terminal while entering messages;
instead echo them as `@' characters and discard the current line.
.It Va ignoreeof
Ignore end-of-file conditions (`control-D') on message input,
which instead can be terminated only by entering a
.Va dot
(`.') on a line by itself or by using the `~.'
.Sx "TILDE ESCAPES" .
This option also applies to \*(UA command mode.
.It Va imap-use-starttls
\*(OP Causes \*(UA to issue a `STARTTLS' command to make an unencrypted
IMAP session SSL/TLS encrypted.
This functionality is not supported by all servers,
and is not used if the session is already encrypted by the IMAPS method.
.It Va imap-use-starttls-USER@HOST
Activates
.Va imap-use-starttls
for a specific account.
.It Va keep
This option causes \*(UA to truncate the user's system mailbox instead
of deleting it when it is empty.
This should always be set since it prevents malicious users from
creating fake mail folders in a world-writable spool directory.
.It Va keepsave
When a message is saved it is usually discarded from the originating
folder when \*(UA is quit.
Setting this option causes all saved message to be retained.
.It Va line-editor-disable
Turn off any enhanced command line editing capabilities (see
.Sx COMMAND LINE EDITOR
for more).
.It Va markanswered
When a message is replied to and this variable is set,
it is marked as having been answered.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.It Va message-id-disable
By setting this option the generation of `Message-ID:' can be completely
suppressed, effectively leaving this task up to the mail-transfer-agent
(MTA) or the SMTP server.
(According to RFC 5321 your SMTP server is not required to add this
field by itself, so you should ensure that it accepts messages without
a `Message-ID'.)
.It Va metoo
Usually, when a group is expanded that contains the sender,
the sender is removed from the expansion.
Setting this option causes the sender to be included in the group.
Note that a set
.Va metoo
also causes a
.Fl m
option to be passed to Mail-Transfer-Agents (MTAs);
though most of the modern MTAs don't (no longer) document this flag, no
MTA is known which doesn't support it (for historical compatibility).
.It Va mime-allow-text-controls
When sending messages, each part of the message is MIME-inspected in
order to classify the `Content-Type:' and `Content-Transfer-Encoding:'
that is required to send this part over mail transport, i.e.,
a computation rather similar to what the
.Xr file 1
command produces when used with the
.Fl -mime
option.
.Pp
This classification however treats text files which are encoded in
UTF-16 (often found for HTML files) and similar character sets as binary
octet-streams, forcefully changing any `text/plain' or `text/html'
specification to `application/octet-stream';
if that actually happens, then a yet unset charset MIME parameter is set
to `binary', effectively making it impossible for the receiving MUA to
automatically interpret the contents of the part.
.Pp
If this option is set, and the data was unambiguously identified as text
data at first glance (by a `.txt' or `.html' file extension), then the
original `Content-Type:' will not be overwritten.
.It Va netrc-lookup-USER@HOST , \
  Va netrc-lookup-HOST , \
  Va netrc-lookup
\*(IN \*(OP Used to control usage of the users
.Pa .netrc
file for lookup of account credentials, as documented in the section
.Sx "ON URL SYNTAX AND CREDENTIAL LOOKUP"
and for the command
.Ic netrc ;
the section
.Sx THE .netrc FILE
documents the file format.
.It Va outfolder
Causes the filename given in the
.Va record
variable
and the sender-based filenames for the
.Ic Copy
and
.Ic Save
commands to be interpreted relative to the directory given in the
.Va folder
variable rather than to the current directory,
unless it is set to an absolute pathname.
.It Va page
If set, each message the
.Ic pipe
command prints out is followed by a formfeed character.
.It Va piperaw
Send messages to the
.Ic pipe
command without performing MIME and character set conversions.
.It Va pop3-bulk-load
\*(OP When accessing a POP3 server \*(UA loads the headers of the
messages, and only requests the message bodies on user request.
For the POP3 protocol this means that the message headers will be
downloaded twice.
If this option is set then \*(UA will download only complete messages
from POP3 servers instead.
It may be useful to
.Ic define
a macro that temporarily sets this option, then accesses a POP3 account
that is known to only get small text messages, and then unsets this
variable again.
.It Va pop3-no-apop
\*(OP Unless this variable is set the `APOP' authentication method
will be used when connecting to a POP3 server that advertises support.
The advantage of APOP over `USER/PASS' authentication is that the
password is not sent in clear text over the wire and that only a single
packet is sent for the user/password tuple.
.It Va pop3-no-apop-HOST
\*(IN Disables the `APOP' authentication method for a specific host.
.It Va pop3-no-apop-USER@HOST
Disables the `APOP' authentication method for a specific account.
.It Va pop3-use-starttls
\*(OP Causes \*(UA to issue a `STLS' command to make an unencrypted POP3
session SSL/TLS encrypted.
This functionality is not supported by all servers,
and is not used if the session is already encrypted by the POP3S method.
.It Va pop3-use-starttls-HOST
\*(IN Activates
.Va pop3-use-starttls
for a specific host.
.It Va pop3-use-starttls-USER@HOST
Activates
.Va pop3-use-starttls
for a specific account.
.It Va print-all-chars
This option causes all characters to be considered printable.
It is only effective if given in a startup file.
With this option set some character sequences in messages may put the
user's terminal in an undefined state when printed;
it should only be used as a last resort if no working system locale can
be found.
.It Va print-alternatives
When a MIME message part of type `multipart/alternative' is displayed
and it contains a subpart of type `text/plain',
other parts are normally discarded.
Setting this variable causes all subparts to be displayed,
just as if the surrounding part was of type `multipart/mixed'.
.It Va quiet
Suppresses the printing of the version when first invoked.
.It Va quote-as-attachment
If this is set, then the original message is added in its entirety
as a `message/rfc822' MIME attachment when replying to a message.
Note this works regardless of the setting of
.Va quote .
.It Va recipients-in-cc
On group replies, specify only the sender of the original mail in `To:'
and mention it's other recipients in the secondary `Cc:'.
.It Va record-resent
If both this variable and the
.Va record
variable are set,
the
.Ic resend
and
.Ic Resend
commands save messages to the
.Va record
folder as it is normally only done for newly composed messages.
.It Va reply-in-same-charset
If this variable is set \*(UA first tries to use the same character set
of the original message for replies.
If this fails, the mechanism described in
.Sx CHARACTER SETS
is evaluated as usual.
.It Va Replyall
Reverses the sense of
.Ic reply
and
.Ic Reply
commands.
.It Va rfc822-body-from_
This variable can be used to force the display of a so-called `From_'
line for messages that are embedded into an envelope mail via the
`message/rfc822' MIME mechanism.
.It Va save
When the user aborts a message with two `RUBOUT' (interrupt,
`control-C') characters,
\*(UA will copy the partial letter to the file
.Ev DEAD .
This option is set by default.
.It Va searchheaders
Expand message-list specifiers in the form `/x:y' to all messages
containing the substring `y' in the header field `x'.
The string search is case insensitive.
.It Va sendcharsets-else-ttycharset
\*(OP If this variable is set, but
.Va sendcharsets
is not, then \*(UA acts as if
.Va sendcharsets
had been set to the value of the variable
.Va ttycharset .
In effect this combination passes through the message data in the
character set of the current locale (given that
.Va ttycharset
hasn't been set manually), i.e., without converting it to the
.Va charset-8bit
fallback character set.
Thus, mail message text will be in `ISO-8859-1' encoding when send from
within a `ISO-8859-1' locale, and in `UTF-8' encoding when send from
within an `UTF-8' locale.
If no character set conversion capabilities are available in \*(UA then
the only supported character set is
.Va ttycharset .
.It Va sendwait
When sending a message wait until the MTA exits before accepting further
commands.
If the MTA returns a non-zero exit status,
the exit status of \*(ua will also be non-zero.
.It Va showlast
Setting this option causes \*(UA to start at the last message instead of
the first one when opening a mail folder.
.It Va showname
Causes \*(UA to use the sender's real name instead of the plain address
in the header field summary and in message specifications.
.It Va showto
Causes the recipient of the message to be shown in the header summary
if the message was sent by the user.
.It Va skipemptybody
If an outgoing message does not contain any text in its first or only
message part,
do not send it but discard it silently (see also the command line option
.Fl E Ns
).
.It Va smime-force-encryption
\*(OP Causes \*(UA to refuse sending unencrypted messages.
.It Va smime-sign
\*(OP S/MIME sign outgoing messages with the user's private key and
include the user's certificate as a MIME attachment.
Signing a message enables a recipient to verify that the sender used
a valid certificate,
that the email addresses in the certificate match those in the message
header and that the message content has not been altered.
It does not change the message text,
and people will be able to read the message as usual.
Also see
.Va smime-sign-cert
and
.Va smime-sign-include-certs .
.It Va smime-no-default-ca
\*(OP Don't load default CA locations when verifying S/MIME signed
messages.
.It Va smtp-use-starttls
\*(OP Causes \*(UA to issue a `STARTTLS' command to make an SMTP session
SSL/TLS encrypted.
.It Va smtp-use-starttls-HOST
Overrides
.Va smtp-use-starttls
for SMTP accounts on a specific host.
.It Va smtp-use-starttls-USER@HOST
Overrides
.Va smtp-use-starttls
for a specific account.
.It Va ssl-no-default-ca
\*(OP Don't load default CA locations to verify SSL/TLS server
certificates.
.It Va ssl-v2-allow
\*(OP Accept SSLv2 connections.
These are normally not allowed because this protocol version is insecure.
.It Va keep-content-length
When (editing messages and) writing
.Ev MBOX
mailbox files \*(UA can be told to keep the `Content-Length:' and
`Lines:' header fields that some MUAs generate by setting this variable.
Since \*(UA does neither use nor update these non-standardized header
fields (which in itself shows one of their conceptual problems),
stripping them should increase interoperability in between MUAs that
work with with same mailbox files.
Note that, if this is not set but
.Va writebackedited ,
as below, is, a possibly performed automatic stripping of these header
fields already marks the message as being modified.
.It Va v15-compat
Setting this option enables upward compatibility with \*(UA version 15.0
in respect to which configuration options are available and how they are
handled.
This manual uses \*(IN and \*(OU to refer to the new and the old way of
doing things, respectively.
.It Va verbose
Setting this option, also controllable via the command line option
.Fl v ,
causes \*(UA to be more verbose, so that, e.g., certificate chains will
be displayed on the users terminal.
Setting this binary options twice increases the level of verbosity, in
which case even details of the actual message delivery and protocol
conversations are also shown.
A single
.Va noverbose
is sufficient to disable verbosity as such.
.It Va writebackedited
If this variable is set messages modified using the
.Ic edit
or
.Ic visual
commands are written back to the current folder when it is quit;
it is only honoured for writable folders in MBOX format, though.
Note that the editor will be pointed to the raw message content in that
case, i.e., neither MIME decoding nor decryption will have been
performed,
and proper RFC 4155 `From ' quoting of newly added or edited content is
also left as an excercise to the user.
.El
.\" }}}
.\"
.\" .Ss "Value options" {{{
.Ss "Value options"
.Bl -tag -width ".Va autoprint"
.It Va agent-shell-lookup-USER@HOST , \
  Va agent-shell-lookup-HOST , \
  Va agent-shell-lookup
\*(IN \*(OP Account passwords can be fetched via an external agent
program in order to permit encrypted password storage \(en see
.Sx "ON URL SYNTAX AND CREDENTIAL LOOKUP"
for more on credential lookup.
If this is set then the content is interpreted as a shell command the
output of which (with newline characters removed) is treated as the
account password shall the command succeed; e.g., via
.Xr gpg 1 :
.Bd -literal -offset indent
$ echo PASSWORD > .pass
$ gpg -e .pass
$ eval `gpg-agent --daemon \e
    --pinentry-program=/usr/bin/pinentry-curses \e
    --max-cache-ttl 99999 --default-cache-ttl 99999`
$ echo 'set agent-shell-lookup="gpg -d .pass.gpg"' \e
    >> \*(ur
.Ed
.Pp
A couple of environment variables will be set for the agent:
.Bl -tag -width ".It Ev NAIL_HOST_PORT"
.It Ev NAIL_USER
The user (`USER') for which the password is looked up.
.It Ev NAIL_USER_ENC
The URL percent-encoded variant of
.Ev NAIL_USER .
.It Ev NAIL_HOST
The plain machine hostname of the user account.
.It Ev NAIL_HOST_PORT
The `HOST' (hostname possibly including port) of the user account.
.El
.It Va attrlist
A sequence of characters to print in the `attribute' column of a header
summary,
each for one type of messages in the following order:
new (N), unread but old (U), new but read (R), read and old (O), saved
(S), preserved (P), mboxed (M), flagged (F), answered (A), draft (T),
start of a collapsed thread (+), collapsed (\-), classified as spam ($).
The default is `NUROSPMFAT+\-$',
or `NU\ \ *HMFAT+\-$' if
.Va bsdflags
or the
.Va SYSV3
environment variable are set.
.It Va autobcc
Specifies a list of recipients to which a blind carbon copy of each
outgoing message will be sent automatically.
.It Va autocc
Specifies a list of recipients to which a carbon copy of each outgoing
message will be sent automatically.
.It Va autosort
Causes sorted mode (see the
.Ic sort
command) to be entered automatically with the value of this option as
sorting method when a folder is opened.
.It Va charset-7bit
The value that should appear in the `charset=' parameter of
`Content-Type:' MIME header fields when no character set conversion of
the message data was performed.
This defaults to `US-ASCII', and the chosen character set should be
`US-ASCII' compatible.
.It Va charset-8bit
\*(OP The default 8 bit character set that is used as an implied last
member of the variable
.Va sendcharsets .
Defaults to `UTF-8'.
If no character set conversion capabilities are available in \*(UA then
the only supported character set is
.Va ttycharset .
Refer to the section
.Sx CHARACTER SETS
for the complete picture of character set conversion in \*(UA.
.It Va cmd
The default value for the
.Ic pipe
command.
.It Va colour-from_
\*(OP The colour specification for so-called `From_' lines.
See the section
.Sx "Coloured message display"
for the format of the value.
.It Va colour-header
\*(OP The colour specification for header lines.
See the section
.Sx "Coloured message display"
for the format of the value.
.It Va colour-msginfo
\*(OP The colour specification for the introductional message info line.
See the section
.Sx "Coloured message display"
for the format of the value.
.It Va colour-partinfo
\*(OP The colour specification for MIME part info lines.
See the section
.Sx "Coloured message display"
for the format of the value.
.It Va colour-terms
\*(OP A comma-separated list of
.Ev TERM Ns
inals for which coloured message display can be used.
Entries only need to be added if the string "color" isn't part of the
terminal name itself; the default value is
.Pp
.Dl cons25,linux,rxvt,rxvt-unicode,\:screen,\:sun,\:vt100,\:vt220,\:\
wsvt25,\:xterm
.It Va colour-uheader
\*(OP The colour specification for those header lines that have been
placed in the
.Va colour-user-headers
list.
See the section
.Sx "Coloured message display"
for the format of the value.
.It Va colour-user-headers
A comma separated list of (case-insensitive) header names which should
be colourized with the alternative
.Va colour-uheader
colours.
The default value is `from,subject'.
.It Va crt
The valued option crt is used as a threshold to determine how long
a message must be before
.Ev PAGER
is used to read it.
If
.Va crt
is set without a value then the height of the terminal screen stored in
the system is used to compute the threshold (see
.Va LINES
and
.Xr stty 1 Ns
).
.It Va datefield
The date in a header summary is normally the date of the mailbox `From\ '
line of the message.
If this variable is set, then the date as given in the `Date:' field is
used, converted to local time.
It is possible to control the display of the date by assigning a value,
in which case the
.Xr strftime 3
function will be used to format the date accordingly.
Please read your system manual for the available formats.
Note that the `%n' format should not be used, because \*(UA doesn't
take embedded newlines into account when calculating how many lines fit
onto the screen.
.It Va datefield-markout-older
This option, when set in addition to
.Va datefield ,
modifies the display of messages that are not really current in a way
that is rather comparable to the
.Fl l
option of the POSIX
.Xr ls 1
command.
The interpretation of the value is identical to what has been described
for
.Va datefield .
.It Va encoding
Suggestion for the MIME encoding to use in outgoing text messages
and message parts.
Valid values are the default `quoted-printable', `8bit' and `base64'.
`8bit' may cause problems with when transferring mail messages over
channels that are not ESMTP (RFC 1869) compliant.
If there is no need to encode a message,
`7bit' transfer mode is always used regardless of this variable.
Binary data is always encoded as `base64'.
.It Va escape
If defined, the first character of this option
gives the character to use in place of `~' to denote
.Sx "TILDE ESCAPES" .
.It Va expandaddr
If set then an extended way of interpreting recipient address
specifications is used \(en see the section
.Sx Sending mail
for more on this.
To disallow any extended interpretation only in non-interactive mode,
unless tilde commands were enabled explicitly by using one of the
command line options
.Fl ~
or
.Fl # ,
set this to the (case-insensitive) value `restrict'.
.It Va folder
The name of the directory to use for storing folders of messages.
All folder names that begin with `+' refer to files below it.
The same special conventions as documented for the
.Ic file
command may be used when specifying a new value for
.Va folder ,
but be aware that the expansion is fully performed immediately.
E.g., if the expanded name refers to an IMAP account, all names that
begin with `+' refer to IMAP mailboxes below the
.Va folder
target box.
.Pp
Note: some IMAP servers do not accept the creation of mailboxes in
the hierarchy base, but require that they are created as subfolders of
`INBOX' \(en with such servers a folder name of the form
.Pp
.Dl imaps://mylogin@imap.myisp.example/INBOX.
.Pp
should be used (the last character is the server's hierarchy delimiter).
Folder names prefixed by `+' will then refer to folders below `INBOX',
while folder names prefixed by `@' refer to folders below the hierarchy
base.
See the
.Ic imap
namespace command for a method to detect the appropriate prefix and
delimiter.
.It Va folder-hook
When a folder is opened and this variable is set,
the macro corresponding to the value of this variable is executed.
The macro is also invoked when new mail arrives,
but message lists for commands executed from the macro
only include newly arrived messages then.
.It Va folder-hook-fullname
When a folder named `fullname' is opened,
the macro corresponding to the value of this variable is executed.
Unlike other folder specifications,
the fully expanded name of a folder, without metacharacters,
is used to avoid ambiguities.
The macro specified with
.Va folder-hook
is not executed if this variable is effective for a folder
(but it can be
.Ic call Ns
ed from within the actually executed macro).
.It Va from
The address (or a list of addresses) to put into the `From:' field of
the message header, quoting RFC 5322:
the author(s) of the message, that is, the mailbox(es) of the person(s)
or system(s) responsible for the writing of the message.
If replying to messages these addresses are handled as if they were in
the
.Ic alternates
list.
If the machine's hostname is not valid at the Internet (for example at
a dialup machine) then either this variable or
.Va hostname
(\*(IN and with
.Va smtp
.Va smtp-hostname
adds even more fine-tuning capabilities),
have to be set.
If
.Va from
contains more than one address,
setting the
.Va sender
variable is required (according to the standard RFC 5322).
.It Va fwdheading
The string to print before the text of a message with the
.Ic forward
command
(unless the
.Va forward-as-attachment
variable is set).
Defaults to `-------- Original Message --------' if unset.
No heading is printed if it is set to the empty string.
.It Va headline
A format string to use for the header summary,
similar to
.Xr printf 3
formats.
A `%' character introduces a format specifier.
It may be followed by a number indicating the field width.
If the (possibly implicitly implied) field width is negative, the field
is to be left-aligned.
Valid format specifiers are:
.Bl -tag -offset indent -width "%%"
.It %a
Message attributes.
.It %d
The date when the message was received.
.It %e
The indenting level in threaded mode.
.It %f
The address of the message sender.
.It %i
The message thread structure.
(Note that this format doesn't support a field width.)
.It %l
The number of lines of the message.
.It %m
Message number.
.It %o
The number of octets (bytes) in the message.
.It %s
Message subject (if any).
.It %S
Message subject (if any) in double quotes.
.It %t
The position in threaded/sorted order.
.It %>
A `>' for the current message, otherwise ` '.
.It %<
A `<' for the current message, otherwise ` '.
.It %$
The spam score of the message, as has been classified via the command
.Ic spamrate .
.It %%
A `%' character.
.El
.Pp
The default is `%>\&%a\&%m\ %-18f\ %16d\ %4l/%\-5o\ %i%-s',
or `%>\&%a\&%m\ %20-f\ \ %16d\ %3l/%\-5o\ %i%-S' if
.Va bsdcompat
is set.
Also see
.Va attrlist
and
.Va headline-bidi .
.It Va headline-bidi
Bidirectional text requires special treatment when displaying headers,
because numbers (in dates or for file sizes etc.) will not affect the
current text direction, in effect resulting in ugly line layouts when
arabic or other right-to-left text is to be displayed.
On the other hand only a minority of terminals is capable to correctly
handle direction changes, so that user interaction is necessary for
acceptable results.
Note that extended host system support is required nonetheless, e.g.,
detection of the terminal character set is one precondition;
and this feature only works in an Unicode (i.e., UTF-8) locale.
.Pp
In general setting this variable will cause \*(UA to encapsulate text
fields that may occur when printing
.Va headline
(and some other fields, like dynamic expansions in
.Va prompt )
with special Unicode control sequences;
it is possible to fine-tune the terminal support level by assigning
a value:
no value (or any value other than `1', `2' and `3') will make \*(UA
assume that the terminal is capable to properly deal with Unicode
version 6.3, in which case text is embedded in a pair of U+2068 (FIRST
STRONG ISOLATE) and U+2069 (POP DIRECTIONAL ISOLATE) characters.
In addition no space on the line is reserved for these characters.
.Pp
Weaker support is chosen by using the value `1' (Unicode 6.3, but
reserve the room of two spaces for writing the control sequences onto
the line).
The values `2' and `3' select Unicode 1.1 support (U+200E, LEFT-TO-RIGHT
MARK); the latter again reserves room for two spaces in addition.
.It Va hostname
Use this string as hostname when expanding local addresses instead of
the value obtained from
.Xr uname 2
and
.Xr getaddrinfo 3 ,
i.e., in `Message-ID:' and `From:' fields.
Note that when
.Va smtp
transport is not used then it is normally the responsibility of the MTA
to create these fields, \*(IN in conjunction with
.Va smtp
however
.Va smtp-hostname
also influences the results;
you should produce some test messages with the desired combination of
.Va hostname ,
and/or
.Va from ,
.Va sender
etc. first.
.It Va imap-auth
\*(OP Sets the IMAP authentication method.
Valid values are `login' for the usual password-based authentication
(the default),
`cram-md5', which is a password-based authentication that does not send
the password over the network in clear text,
and `gssapi' for GSS-API based authentication.
.It Va imap-auth-USER@HOST
Sets the IMAP authentication method for a specific account.
.It Va imap-cache
\*(OP Enables caching of IMAP mailboxes.
The value of this variable must point to a directory that is either
existent or can be created by \*(UA.
All contents of the cache can be deleted by \*(UA at any time;
it is not safe to make assumptions about them.
.It Va imap-keepalive
\*(OP IMAP servers may close the connection after a period of
inactivity; the standard requires this to be at least 30 minutes,
but practical experience may vary.
Setting this variable to a numeric `value' greater than 0 causes
a `NOOP' command to be sent each `value' seconds if no other operation
is performed.
.It Va imap-list-depth
\*(OP When retrieving the list of folders on an IMAP server, the
.Ic folders
command stops after it has reached a certain depth to avoid possible
infinite loops.
The value of this variable sets the maximum depth allowed.
The default is 2.
If the folder separator on the current IMAP server is a slash `/',
this variable has no effect and the
.Ic folders
command does not descend to subfolders.
.It Va indentprefix
String used by the `~m', `~M' and `~R'
.Sx "TILDE ESCAPES"
and by the
.Va quote
option for indenting messages,
in place of the normal tabulator character (`^I'), which is the default.
Be sure to quote the value if it contains spaces or tabs.
.It Va line-editor-cursor-right
\*(OP If the builtin command line editor is used, actions which are
based on rightwise movement may not work on some terminals.
If you encounter such problems, set this variable to the terminal
control sequence that is necessary to move the cursor one column to the
right.
The default is `\\033[C', which should work for most terminals.
Less often occur `\\033OC' and `\\014'.
Note that `ESCAPE' and other control character have to be written as
shell-style escape sequences, e.g., `\\033' for `ESCAPE'.
.It Va MAIL
Is used as the user's mailbox, if set.
Otherwise, a system-dependent default is used.
Supports a logical subset of the special conventions that are documented
for the
.Ic file
command and the
.Va folder
option.
.It Va mime-counter-evidence
Normally the `Content-Type:' field is used to decide how to treat
a messages MIME part.
Some MUAs however don't use
.Xr mime.types 5
or a similar mechanism to correctly classify content,
but simply specify `application/octet-stream',
even for plain text attachments like `text/diff'.
If this variable is set then \*(UA will use the file extension of
attachments to classify such MIME message parts, if possible.
.Pp
This can also be given a non-empty value: in this case the value is
expected to be a number, actually a carrier of bits.
If bit two is set (0x2) then the detected "real" content-type will be
carried along with the message and be used for detecting which
.Va pipe-CONTENT/SUBCONTENT
is responsible for the MIME part, shall that question arise;
when displaying such a MIME part the part-info will indicate the
overridden content-type by showing a plus-sign (`+').
.It Va mimetypes-load-control
This option can be used to control which of the
.Xr mime.types 5
MIME type databases are loaded by \*(UA.
If the letter `u' (or `U') is part of this options value, then the
user's personal
.Pa ~/.mime.types
file will be loaded (if it exists);
likewise the letter `s' (or `S') controls loading of the system wide
.Pa /etc/mime.types .
If this option is not set \*(UA will try to load both files instead.
Incorporation of the MIME types that are compiled into \*(UA cannot be
suppressed.
.It Va NAIL_EXTRA_RC
The name of an optional startup file to be read after \*(ur.
This variable is ignored if it is imported from the environment;
it has an effect only if it is set in \*(UR or \*(ur to allow bypassing
the configuration with, e.g., `MAILRC=/dev/null'.
Use this file for commands that are not understood by other \*(UA
implementations.
.It Va NAIL_HEAD
A string to put at the beginning of each new message.
The escape sequences `\et' (tabulator) and `\en' (newline) are understood.
.It Va NAIL_HISTFILE
\*(OP If a command line editor is available then this can be set to
name the (expandable) path of the location of a permanent history file.
.It Va NAIL_HISTSIZE
\*(OP If a command line editor is available this value restricts the
amount of history entries that are saved into a set and valid
.Va NAIL_HISTFILE .
A value of less than 0 disables this feature;
note that loading and incorporation of
.Va NAIL_HISTFILE
upon program startup can also be suppressed by doing this.
An unset or invalid value, or 0, causes a default value to be used.
Dependent on the available command line editor this will also define the
number of history entries in memory;
it is also editor-specific wether runtime updates of this value will be
honoured.
.It Va NAIL_TAIL
A string to put at the end of each new message.
The escape sequences `\et' (tabulator) and `\en' (newline) are understood.
.It Va newfolders
If this variable has the value `maildir',
newly created local folders will be in `maildir' format.
.It Va newmail
Checks for new mail in the current folder each time the prompt is
printed.
For IMAP mailboxes the server is then polled for new mail,
which may result in delayed operation if the connection to the server is
slow.
A `maildir' folder must be re-scanned to determine if new mail has
arrived.
.Pp
If this variable is set to the special value `nopoll' an IMAP server is
not actively asked for new mail,
but new mail may still be detected and announced with any other IMAP
command that is sent to the server.
A `maildir' folder is not scanned, then.
.Pp
In either case the IMAP server may send notifications about messages
that have been deleted on the server by another process or client.
In this case, `Expunged X messages' is printed regardless of this
variable,
and message numbers may have changed.
.It Va ORGANIZATION
The value to put into the `Organization:' field of the message header.
.It Va password
\*(IN Sets a global fallback password, which is used in case none has
been given in the protocol and account-specific URL and neither is there
a matching `password-USER@HOST' nor a matching `password-HOST';
as a last resort \*(UA will ask for a password on the user's terminal if
the authentication method requires a password.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.
.It Va password-HOST
\*(IN Override
.Va password
for accounts on a specific host.
.It Va password-USER@HOST
\*(IN Override
.Va password
and
.Va password-HOST
for a specific account.
\*(OU
Set the password for `user' when connecting to `host'.
If no such variable is defined for a host,
the user will be asked for a password on standard input.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.
.It Va pipe-CONTENT/SUBCONTENT
When a MIME message part of type `CONTENT/SUBCONTENT' (normalized to
lowercase) type is displayed or quoted,
its text is filtered through the value of this variable interpreted as
a shell command.
The special value `@' can be used to force interpretation of the message
part as plain text, e.g., `set pipe-application/pgp-signature=@' will
henceforth treat signatures as plain text and display them "as is".
.Pp
Also, if a shell command is prefixed with `@', then the command will
only be used to prepare the MIME message part if the message is displayed
by itself, but not when multiple messages are displayed at once.
.Pp
Finally, if a shell command is prefixed with `@&', then, in addition
to what has been described for the plain `@' shell command prefix, the
command will be run asynchronously, i.e., without blocking \*(UA, which
may be a handy way to display a, e.g., PDF file while also continuing
to read the mail message.
.Pp
Some information about the MIME part to be displayed is embedded into
the environment of the shell command:
.Bl -tag -width ".It Ev NAIL_FILENAME_GENERATED"
.It Ev NAIL_FILENAME
The filename, if any is set, the empty string otherwise.
.It Ev NAIL_FILENAME_GENERATED
Set to
.Ev NAIL_FILENAME
if that isn't empty, but otherwise a combination of a random string
(always) and the `SUBCONTENT' of the MIME part, if the latter is known.
.It Ev NAIL_CONTENT
The MIME content-type of the part, if known, the empty string otherwise.
.It Ev NAIL_CONTENT_EVIDENCE
If
.Va mime-counter-evidence
includes the carry-around-bit (2), then this will be set to the detected
MIME content-type; not only then identical to
.Ev NAIL_CONTENT
otherwise.
.El
.It Va pipe-EXTENSION
This is identical to
.Va pipe-CONTENT/SUBCONTENT
except that `EXTENSION' (normalized to lowercase using character
mappings of the ASCII charset) names a file extension, e.g., `xhtml'.
Handlers registered using this method take precedence.
.It Va pop3-keepalive
\*(OP POP3 servers close the connection after a period of inactivity;
the standard requires this to be at least 10 minutes,
but practical experience may vary.
Setting this variable to a numeric `value' greater than 0 causes
a `NOOP' command to be sent each `value' seconds if no other operation
is performed.
.It Va prompt
The string printed when a command is accepted.
Prompting may be prevented by either setting this to the null string
or by setting
.Va noprompt .
The same XSI escape sequences that are understood by the
.Ic echo
command may be used within
.Va prompt .
.Pp
In addition, the following \*(UA specific additional sequences are
understood:
`\\&', which expands to `?' unless
.Va bsdcompat
is set, in which case it expands to `&';
note that "\\& " is the default value for
.Va prompt .
`\\?', which will expand to `1' if the last command failed, and to `0'
otherwise,
`\\$', which will expand to the name of the currently active
.Ic account ,
if any, and to the empty string otherwise,
and `\\@', which will expand to the name of the currently active mailbox.
(Note that the prompt buffer is size-limited, excess is cut off.)
.Pp
Even though
.Va prompt
checks for
.Va headline-bidi
to encapsulate the expansions of the `\\$' and `\\@' escape sequences as
necessary to correctly display bidirectional text, this is not true for
the final string that makes up
.Va prompt
as such, i.e., real BIDI handling is not supported.
.Pp
When a newer version of the
.Xr editline 3
.Sx COMMAND LINE EDITOR
is used, any escape sequence must itself be encapsulated with another
escape character for usage with the
.Va EL_PROMPT_ESC
mechanism: \*(UA configures the control character `\\01' for this.
.It Va quote
If set, \*(UA starts a replying message with the original message
prefixed by the value of the variable
.Va indentprefix .
Normally, a heading consisting of `Fromheaderfield wrote:' is printed
before the quotation.
If the string `noheading' is assigned to the
.Va quote
variable, this heading is omitted.
If the string `headers' is assigned, the headers selected by the
.Ic ignore Ns / Ns Ic retain
commands are printed above the message body,
thus
.Va quote
acts like an automatic `~m'
.Sx "TILDE ESCAPES"
command, then.
If the string `allheaders' is assigned, all headers are printed above
the message body and all MIME parts are included,
making
.Va quote
act like an automatic `~M' command.
Also see
.Va quote-as-attachment .
.It Va quote-fold
\*(OP Can be set in addition to
.Va indentprefix .
Setting this turns on a more fancy quotation algorithm in that leading
quotation characters are compressed and overlong lines are folded.
.Va quote-fold
can be set to either one or two (space separated) numeric values,
which are interpreted as the maximum (goal) and the minimum line length,
respectively, in a spirit rather equal to the
.Xr fmt 1
program, but line-, not paragraph-based.
If not set explicitly the minimum will reflect the goal algorithmically.
The goal can't be smaller than the length of
.Va indentprefix
plus some additional pad.
Necessary adjustments take place silently.
.It Va record
If defined, gives the pathname of the folder used to record all outgoing
mail.
If not defined, then outgoing mail is not saved.
When saving to this folder fails the message is not sent,
but instead saved to
.Va DEAD .
.It Va reply_strings
Can be set to a comma-separated list of (case-insensitive according to
ASCII rules) strings which shall be recognized in addition to the
builtin strings as reply message indicators.
Builtin are `Re:', which is mandated by RFC 5322, as well as the german
`aw:'.
.It Va replyto
A list of addresses to put into the `Reply-To:' field of the message
header.
Members of this list are handled as if they were in the
.Ic alternates
list.
.It Va screen
When \*(UA initially prints the message headers it determines the number
to print by looking at the speed of the terminal.
The faster the terminal, the more it prints.
This option overrides this calculation and specifies how many message
headers are printed.
This number is also used for scrolling with the
.Ic z
command.
.It Va sendcharsets
\*(OP A comma-separated list of character set names that can be used in
outgoing Internet mail.
The value of the variable
.Va charset-8bit
is automatically appended to this list of character-sets.
If no character set conversion capabilities are compiled into \*(UA then
the only supported charset is
.Va ttycharset .
Also see
.Va sendcharsets-else-ttycharset
and refer to the section
.Sx CHARACTER SETS
for the complete picture of character set conversion in \*(UA.
.It Va sender
An address that is put into the `Sender:' field of outgoing messages,
quoting RFC 5322: the mailbox of the agent responsible for the actual
transmission of the message.
This field should normally not be used unless the `From:' field contains
more than one address, on which case it is required.
The
.Va sender
address is handled as if it were in the
.Ic alternates
list.
.It Va sendmail
To use an alternate mail delivery system,
set this option to the full pathname of the program to use.
It may be necessary to set
.Va sendmail-progname
in addition.
.It Va sendmail-arguments
Arguments to pass through to the Mail-Transfer-Agent can be given via
this option.
These will be joined onto MTA options that have been given on the
command line.
.Pp
.Dl set sendmail-arguments='-t -X \&"/tmp/my log\&"'
.It Va sendmail-progname
Many systems use a so-called
.Xr mailwrapper 8
environment to ensure compatibility with
.Xr sendmail 1 .
This works by inspecting the name that was used to invoke the mail
delivery system.
If this variable is set then the mailwrapper (the program that is
actually executed when calling `sendmail') will treat its contents as
that name.
The default is `sendmail'.
.It Va Sign
A string for use with the `~A' tilde escape.
.It Va sign
A string for use with the `~a' tilde escape.
.It Va signature
Must correspond to the name of a readable file if set.
The file's content is then appended to each singlepart message
and to the first part of each multipart message.
Be warned that there is no possibility to edit the signature for an
individual message.
.It Va smime-ca-dir
\*(OP Specifies a directory with CA certificates in PEM (Privacy
Enhanced Mail) format for verification of S/MIME signed messages.
.It Va smime-ca-file
\*(OP Specifies a file with CA certificates in PEM format for
verification of S/MIME signed messages.
.It Va smime-cipher-USER@HOST
\*(OP Specifies a cipher to use when generating S/MIME encrypted
messages for the specified account.
RFC 5751 mandates a default of `aes-128' (AES-128 CBC).
.Pp
The actually available cipher algorithms depend on the cryptographic
library that \*(UA uses; possible values are, in decreasing cipher
strength:
`aes-256' (AES-256 CBC), `aes-192' (AES-192 CBC), `aes-128' (AES-128 CBC),
`des3' (DES EDE3 CBC, 168 bits; default if `aes-128' isn't available)
and `des' (DES CBC, 56 bits).
.Pp
The following ciphers have been obsoleted and are no longer mentioned by
the S/MIME specification (RFC 5751), but may be selected if available:
`rc2-64' (RC2 CBC, 64 bits) and `rc2-40' (RC2 CBC, 40 bits).
.It Va smime-crl-file
\*(OP Specifies a file that contains a CRL in PEM format to use when
verifying S/MIME messages.
.It Va smime-crl-dir
\*(OP Specifies a directory that contains files with CRLs in PEM format
to use when verifying S/MIME messages.
.It Va smime-encrypt-USER@HOST
\*(OP If this variable is set, messages send to the given receiver are
encrypted before sending.
The value of the variable must be set to the name of a file that
contains a certificate in PEM format.
.Pp
If a message is sent to multiple recipients,
each of them for whom a corresponding variable is set will receive an
individually encrypted message;
other recipients will continue to receive the message in plain text
unless the
.Va smime-force-encryption
variable is set.
It is recommended to sign encrypted messages, i.e., to also set the
.Va smime-sign
variable.
.It Va smime-sign-cert
\*(OP Points to a file in PEM format.
For the purpose of signing and decryption this file needs to contain the
user's private key as well as his certificate.
.Pp
For the purpose of encryption the recipient's public encryption key
(certificate) is expected; the command
.Ic certsave
can be used to save certificates of signed messages (the section
.Sx "Signed and encrypted messages with S/MIME"
gives some details).
This mode of operation is usually driven via
.Va smime-sign-cert-USER@HOST ,
though.
.It Va smime-sign-cert-USER@HOST
Overrides
.Va smime-sign-cert
for a specific account.
For message signing `USER@HOST' is always derived from the value of
.Va from
(or, if that contains multiple addresses,
.Va sender Ns
).
.Pp
When decrypting messages the account is derived from the recipient
fields (`To:' and `Cc:') of the message, which are searched for
addresses for which such a variable is set.
\*(UA always uses the first address that matches,
so if the same message is sent to more than one of the user's addresses
using different encryption keys, decryption might fail.
.It Va smime-sign-include-certs
\*(OP If used, this is supposed to a consist of a comma-separated list
of files, each of which containing a single certificate in PEM format to
be included in the S/MIME message in addition to the
.Va smime-sign-cert
certificate.
This is most useful for long certificate chains if it is desired to aid
the receiving party's verification process.
Note that top level certificates may also be included in the chain but
don't play a role for verification.
Also see
.Va smime-sign-cert
and
.Va smime-sign-cert-USER@HOST .
.It Va smime-sign-include-certs-USER@HOST
Overrides
.Va smime-sign-include-certs
for a specific account.
.It Va smtp
\*(OP Normally \*(UA invokes the program defined via
.Va sendmail
to transfer messages.
Setting the
.Va smtp
variable will instead cause `SMTP' network connections be made to the
server specified therein in order to directly submit the message.
\*(UA knows about three different "SMTP protocols":
.Bl -bullet -offset indent
.It
The plain `SMTP' protocol (RFC 5321) that normally lives on the
server port 25 and requires setting of the
.Va smtp-use-starttls
variable as above to enter a SSL/TLS encrypted session state.
Assign a value like \*(IN `[smtp://][user[:password]@]server[:port]'
(\*(OU `[smtp://]server[:port]')
to choose this protocol.
.It
Then the so-called `SMTPS' which is supposed to live on server port 465
and is automatically SSL/TLS secured.
Unfortunately it never became a standardized protocol and may thus not
be supported by your hosts network service database
\(en in fact the port number has already been reassigned to other
protocols!
.Pp
`SMTPS' is nonetheless a commonly offered "protocol" and thus can be
chosen by assigning a value like \*(IN
`smtps://[user[:password]@]server[:port]'
(\*(OU `smtps://server[:port]');
due to the mentioned problems it is usually necessary to explicitly
specify the port as `:465', however.
.It
Finally there is the `SUBMISSION' protocol (RFC 6409), which usually
lives on server port 587 and is practically identically to the `SMTP'
protocol from \*(UAs point of view beside that; it requires setting the
.Va smtp-use-starttls
variable to enter a SSL/TLS secured session state.
Assign a value like \*(IN `submission://[user[:password]@]server[:port]'
(\*(OU `submission://server[:port]').
.El
.Pp
The SMTP transfer is executed in a child process, which runs
asynchronously unless either the
.Va sendwait
or the
.Va verbose
variable is set.
If it receives a TERM signal, it will abort and save the message to
.Va DEAD .
.It Va smtp-auth
\*(OP Sets the SMTP authentication method.
Possible values are `none' (the default), `plain', `login'
as well as the \*(OPal methods `cram-md5' and `gssapi'.
The `none' method doesn't need any user credentials,
`gssapi' requires a user name
and all other methods require a user name and a password.
See \*(IN
.Va smtp ,
.Va user
and
.Va password
(\*(OU
.Va smtp-auth-password
and
.Va smtp-auth-user Ns
).
.It Va smtp-auth-HOST
\*(IN Overrides
.Va smtp-auth
for SMTP accounts on a specific host.
.It Va smtp-auth-USER@HOST
Overrides
.Va smtp-auth
for a specific account.
(\*(OU For specific values of sender addresses, dependend upon the variable
.Va from Ns
.Ns .)
.It Va smtp-auth-password
\*(OP \*(OU Sets the global fallback password for SMTP authentication.
If the authentication method requires a password, but neither
.Va smtp-auth-password
nor a matching
.Va smtp-auth-password-USER@HOST
can be found,
\*(UA will ask for a password on the user's terminal.
.It Va smtp-auth-password-USER@HOST
Overrides
.Va smtp-auth-password
for specific values of sender addresses, dependent upon the variable
.Va from .
.It Va smtp-auth-user
\*(OP \*(OU Sets the global fallback user name for SMTP authentication.
If the authentication method requires a user name, but neither
.Va smtp-auth-user
nor a matching
.Va smtp-auth-user-USER@HOST
can be found,
\*(UA will ask for a user name on the user's terminal.
.It Va smtp-auth-user-USER@HOST
Overrides
.Va smtp-auth-user
for specific values of sender addresses, dependent upon the variable
.Va from .
.It Va smtp-hostname
\*(IN Normally \*(UA uses the variable
.Va from
to derive the necessary `USER@HOST' information to issue a
`MAIL FROM:<>' SMTP command.
Setting
.Va smtp-hostname
can be used to use the `USER' from the SMTP account
.Ns ( Va smtp
or the
.Va user
variable chain)
and the `HOST' from the content of this variable
(or, if that is the empty string,
.Va hostname
or the local hostname as a last resort).
This often allows using an address that is itself valid but hosted by
a provider other than which is about to send the message in
.Va from .
Setting this variable also influences the generated `Message-Id:'.
.It Va spam-command
\*(OP The path to the spam detector.
Note that the path is not expanded, but used "as is".
A fallback path will have been compiled into the \*(UA binary if the
.Xr spamc 1
executable had been found during compilation.
.It Va spam-host
\*(OP Can be used to specify the host on which
.Xr spamd 1
listens for connections; if not set, defaults to `localhost'.
.It Va spam-maxsize
\*(OP Spam detectors like
.Xr spamc 1
decline to work with messages which exceed a specific size;
if this variable is set then \*(UA won't even try to pass messages which
exceed the given limit.
The default is 420000 bytes.
.It Va spam-port
\*(OP Can be used to explicitly specify the port on which
.Xr spamd 1
listens for connections.
.It Va spam-socket
\*(OP If the spam detector listens on a path-based UNIX domain socket,
then setting this variable to the fully qualified path will force its
usage for communication.
.It Va spam-user
\*(OP This can be used to support multiple, per-used configuration files
of the spam detector.
Note that \*(UA doesn't automatically set this to reflect a possibly set
.Fl u
option.
.It Va ssl-ca-dir
\*(OP Specifies a directory with CA certificates in PEM (Pricacy
Enhanced Mail) for verification of of SSL/TLS server certificates.
See
.Xr SSL_CTX_load_verify_locations 3
for more information.
.It Va ssl-ca-file
\*(OP Specifies a file with CA certificates in PEM format for
verification of SSL/TLS server certificates.
See
.Xr SSL_CTX_load_verify_locations 3
for more information.
.It Va ssl-cert
\*(OP Sets the file name for a SSL/TLS client certificate required by
some servers.
.It Va ssl-cert-USER@HOST
Sets an account-specific file name for a SSL/TLS client certificate
required by some servers.
Overrides
.Va ssl-cert
for the specified account.
.It Va ssl-cipher-list
\*(OP Specifies a list of ciphers for SSL/TLS connections.
See
.Xr ciphers 1
for more information.
.It Va ssl-crl-file
\*(OP Specifies a file that contains a CRL in PEM format to use when
verifying SSL/TLS server certificates.
.It Va ssl-crl-dir
\*(OP Specifies a directory that contains files with CRLs in PEM format
to use when verifying SSL/TLS server certificates.
.It Va ssl-key
\*(OP Sets the file name for the private key of a SSL/TLS client
certificate.
If unset, the name of the certificate file is used.
The file is expected to be in PEM format.
.It Va ssl-key-USER@HOST
Sets an account-specific file name for the private key of a SSL/TLS
client certificate.
Overrides
.Va ssl-key
for the specified account.
.It Va ssl-method
\*(OP Selects the used TLS/SSL protocol version.
The actually available protocol versions depend on the TLS/SSL
library that \*(UA uses; possible values are, from newest to oldest:
`tls1.2', `tls1.1', `tls1', `ssl3' and `ssl2'.
.Pp
Setting
.Va ssl-method
to any of these values will fixate the used protocol, which means that
connections will fail if the server doesn't support it.
The value `auto', which is the default, chooses a compatibility method
that automatically uses the newest protocol version that the server
is capable to understand.
.Pp
It has to be noted that `auto' is used as a fallback method if
the actual setting of
.Va ssl-method
isn't supported by the used TLS/SSL library \(em in this case an error
message will be printed first, however.
.It Va ssl-method-USER@HOST
Overrides
.Va ssl-method
for a specific account.
.It Va ssl-rand-egd
\*(OP Gives the pathname to an entropy daemon socket, see
.Xr RAND_egd 3 .
Note that (as of 2014) not all OpenSSL installations include this
functionality.
.It Va ssl-rand-file
\*(OP Gives the pathname to a file with entropy data, see
.Xr RAND_load_file 3 .
If the file is a regular file writable by the invoking user,
new data is written to it after it has been loaded.
.It Va ssl-verify
\*(OP Sets the action to be performed if an error occurs during SSL/TLS
server certificate validation.
Valid values are
`strict' (fail and close connection immediately),
`ask' (ask whether to continue on standard input),
`warn' (print a warning and continue),
`ignore' (do not perform validation).
The default is `ask'.
.It Va ssl-verify-USER@HOST
Overrides
.Va ssl-verify
for a specific account.
.It Va stealthmua
If only set without an assigned value, then this option inhibits the
generation of the `Message-Id:' and `User-Agent:' header fields that
include obvious references to \*(UA.
There are two pitfalls associated with this:
First, the message id of outgoing messages is not known anymore.
Second, an expert may still use the remaining information in the header
to track down the originating mail user agent.
If set to the value `noagent', then the mentioned `Message-Id:'
suppression doesn't occur.
.It Va toplines
If defined, gives the number of lines of a message to be printed out
with the top command;
normally, the first five lines are printed.
.It Va ttycharset
The character set of the terminal \*(UA operates on,
and the one and only supported character set that \*(UA can use if no
character set conversion capabilities have been compiled into it,
in which case it defaults to `ISO-8859-1' unless it can deduce a value
from the `LC_CTYPE' locale environment.
Refer to the section
.Sx CHARACTER SETS
for the complete picture about character sets.
.It Va user
\*(IN Sets a global fallback user name, which is used in case none has
been given in the protocol and account-specific URL and there is also
no matching
.Va user-HOST .
This variable defaults to the value of
.Ev USER .
.It Va user-HOST
\*(IN Overrides
.Va user
for a specific host.
.El
.\" }}}
.\" }}} (Variable options)
.\"
.\" .Sh ENVIRONMENT {{{
.Sh ENVIRONMENT
Besides the variables described above,
\*(UA uses the following environment variables:
.Bl -tag -width ".It Ev MAILRC"
.It Ev COLUMNS
The user's preferred width in column positions for the terminal screen
or window (only used during startup).
.It Ev DEAD
The name of the file to use for saving aborted messages.
This defaults to `dead.letter' in the user's home directory.
.It Ev EDITOR
Pathname of the text editor to use in the
.Ic edit
command and
.Ic ~e
.Sx "TILDE ESCAPES" .
A default editor is used if this value is not defined.
.It Ev HOME
The user's home directory.
.It Ev LANG , Ev LC_ALL , Ev LC_COLLATE , Ev LC_CTYPE , Ev LC_MESSAGES
See
.Xr locale 7 .
.It Ev LINES
The user's preferred number of lines on a page or the vertical screen or
window size in lines (only used during startup).
.It Ev LISTER
Pathname of the directory lister to use in the
.Ic folders
command when operating on local mailboxes.
Default is
.Pa /bin/ls .
.It Ev MBOX
The name of the user's mbox file.
Supports a logical subset of the special conventions that are documented
for the
.Ic file
command and the
.Va folder
option.
The fallback default is `mbox' in the user's home directory.
.It Ev MAILRC
Is used as a startup file instead of
.Pa \*(ur
if set.
When \*(UA scripts are invoked on behalf of other users,
this variable should be set to
.Pa /dev/null
to avoid side-effects from reading their configuration files.
.It Ev NAILRC
If this variable is set and
.Ev MAILRC
is not, it is treated as a startup configuration file and read.
.It Ev NAIL_NO_SYSTEM_RC
If this variable is set then reading of \*(UR at startup is inhibited,
i.e., the same effect is achieved as if \*(UA had been started up with
the option
.Fl n .
.It Ev NETRC
\*(IN \*(OP This variable overrides the default location of the user's
.Pa .netrc
file.
.It Ev PAGER
Pathname of the program to use in the more command or when the
.Va crt
variable is set.
The default paginator is
.Xr more 1 .
.It Ev SHELL
Pathname of the shell to use in the
.Ic \!
command and the `~!'
.Sx "TILDE ESCAPES" .
A default shell is used if this option is not defined.
.It Ev SYSV3
Changes the letters printed in the first column of a header summary.
.It Ev TERM
\*(OP The terminal type for which output is to be prepared.
.It Ev TMPDIR
Used as directory for temporary files instead of
.Pa /tmp ,
if set.
.It Ev USER
Can be used to force identification as
.Ev USER ,
i.e., identical to the
.Fl u
command line option.
.It Ev VISUAL
Pathname of the text editor to use in the
.Ic visual
command and `~v'
.Sx "TILDE ESCAPES" .
.El
.\" }}}
.\"
.\" .Sh FILES {{{
.Sh FILES
.Bl -tag -width ".It Pa /etc/mime.types"
.It Pa \*(ur
File giving initial commands.
.It Pa \*(UR
System wide initialization file.
.It Pa ~/.mime.types
Personal MIME types.
.It Pa /etc/mime.types
System wide MIME types.
.It Pa ~/.netrc
\*(IN \*(OP The default location of the users
.Pa .netrc
file \(en the section
.Sx "THE .netrc FILE"
documents the file format.
.El
.\" }}}
.\"
.\" .Sh "THE mime.types FILES" {{{
.Sh "THE mime.types FILES"
For any outgoing attachment \*(UA tries to determine the content type.
It does this by reading MIME type files whose lines have the following
syntax:
.Pp
.Dl type/subtype	extension [extension ...]
.Pp
where `type/subtype' are strings describing the file contents,
and `extension' is the part of a filename starting after the last dot.
Any line not immediately beginning with an ASCII alphabetical character
is ignored by \*(UA.
The variable
.Va mimetypes-load-control
can be used to control the sources of MIME types, and the
.Ic mimetypes
command can be used to show the list of mime types known to \*(UA.
If there is a match with the `extension' of the file to attach,
the given `type/subtype' pair is used.
Otherwise, or if the filename has no extension,
the content types `text/plain' or `application/octet-stream' are used,
dependent upon file content inspection.
Also see
.Va mime-allow-text-controls .
.\" }}}
.\"
.\" .Sh THE .netrc FILE {{{
.Sh THE .netrc FILE
The
.Pa .netrc
file contains user credentials for machine accounts.
The default location in the user's home directory may be
overridden by the
.Ev NETRC
environment variable.
The file consists of space, tabulator or newline separated tokens.
\*(UA implements a parser that supports a superset of the original BSD
syntax, but users should nonetheless be aware of portability glitches
of that file format, shall their
.Pa .netrc
be usable across multiple programs and platforms:
.Bl -bullet
.It
BSD doesn't support single, but only double quotation marks;
e.g., `password="pass with spaces"'.
.It
BSD (only?) supports escaping of single characters via a backslash
(e.g., a space can be escaped via `\e '), in- as well as outside of
a quoted string.
.It
BSD doesn't require the final quotation mark of the final user input
token.
.It
At least Hewlett-Packard seems to support a format which also allows
tokens to be separated with commas \(en this format is not supported!
.It
Whereas other programs may require that the
.Pa .netrc
file is accessible by only the user if it contains a
.Ic password
token for any other
.Ic login
than anonymous, \*(UA will always require these strict permissions.
.El
.Pp
Of the following list of supported tokens \*(UA only uses (and caches)
`machine', `login' and `password':
.Bl -tag -width password
.It Ic machine Ar name
The hostname of the entries machine, lowercase-normalized by \*(UA
before use.
Any further file content, until either end-of-file or the occurrence
of another
.Ic machine
or a
.Ic default
first-class token is bound (only related) to the machine
.Ar name .
.Pp
As an extension that shouldn't be the cause of any worries
\*(UA supports a single wildcard prefix for
.Ar name :
.Pp
.Dl *.example.com login USER password PASSWORD
.Dl imap.example.com login USER password PASSWORD
.Pp
which would match `smtp.example.com' as well as `pop3.example.com', but
neither `example.com' nor `local.smtp.example.com'.
Note that in the example `imap.example.com' will not be matched by the
wildcard, since the exact match takes precedence (it is however faster
to specify it the other way around).
.It Ic default
This is the same as
.Ic machine
except that it is a fallback entry that is used shall none of the
specified machines match; only one default token may be specified,
and it must be the last first-class token.
.It Ic login Ar name
The user name on the remote machine.
.It Ic password Ar string
The user's password on the remote machine.
.It Ic account Ar string
Supply an additional account password.
This is merely for FTP purposes.
.It Ic macdef Ar name
Define a macro.
A macro is defined with the specified
.Ar name ;
it is formed from all lines beginning with the next line and continuing
until a blank line is (consecutive newline characters are) encountered.
(Note that
.Ic macdef
entries cannot be utilized by multiple machines, too, but must be
defined following the
.Ic machine
they are intended to be used with.)
If a macro named
.Ar init
exists, it is automatically run as the last step of the login process.
This is merely for FTP purposes.
.El
.\" }}}
.\"
.\" .Sh EXAMPLES {{{
.Sh EXAMPLES
.\"
.\" .Ss "An example configuration" {{{
.Ss "An example configuration"
.Bd -literal -offset indent
# This example assumes v15.0 compatibility mode
set v15-compat

# Where are the SSL certificates?
set ssl-ca-dir=/etc/ssl/certs
set ssl-verify=strict

# Essential setting: select allowed character sets
set sendcharsets=utf-8,iso-8859-1

# When sending messages, wait until the Mail-Transfer-Agent finishs.
# Only like this you'll be able to see errors reported through the
# exit status of the MTA (including the builtin SMTP one)!
set sendwait

# Don't try to load any external mime.types(5) descriptions
set mimetypes-load-control

# Default directory where we act in (relative to $HOME)
set folder=mail MBOX=+mbox.mbox record=+sent.mbox \e
    DEAD=+dead.mbox

# Not really optional, e.g., for S/MIME
set from="Your Name <youremail@domain>"

# It may be necessary to set hostname and/or smtp-hostname
# if the "SERVER" of smtp and "domain" of from don't match.
# The `urlencode' command can be used to encode USER and PASS
set smtp=(smtp[s]/submission)://[USER[:PASS]@]SERVER[:PORT] \e
    smtp-auth=login/plain... \e
    smtp-use-starttls

# Never refuse to start into interactive mode, and more
set emptystart \e
    colour-pager crt= history-gabby mime-counter-evidence=2 \e
    prompt="\e033[31m?\e?[\e$ \e@]\e& \e033[0m" \e
    NAIL_HISTFILE=+.s-nailhist NAIL_HISTSIZE=-1

# When `p'rinting messages, show only these headers
# (use `P'rint for all headers and `S'how for raw message)
retain date from to cc subject

# A real life example of a very huge free mail provider
account XooglX {
   localopts 1
   # (The plain smtp:// proto is optional)
   set smtp=USER:PASS@smtp.gmXil.com \e
       smtp-auth=plain smtp-use-starttls
   set from="Your Name <youremail@domain>"
}

# Here is a pretty large one which does not allow sending mails
# if there is a domain name mismatch on the SMTP protocol level,
# which would bite us if the value of from does not match, e.g.,
# for people who have a sXXXXeforge project and want to speak
# with the mailing list under their project account (in from),
# still sending the message through their normal mail provider
account XandeX {
   localopts 1
   set smtp=smtps://USER:PASS@smtp.yaXXex.ru:465 smtp-auth=plain \e
       hostname=yaXXex.com smtp-hostname=
   set from="Your Name <youremail@domain>"
}

# Create some new commands so that, e.g., `ls /tmp' will..
ghost ls !ls -Fa
ghost lsr !ls -Far
ghost ll !ls -Fla
ghost llr !ls -Flar
ghost lt !ls -Fat
ghost ltr !ls -Fatr
ghost llt !ls -Flat
ghost lltr !ls -Flatr
ghost pl !ps -o user,pid,ppid,pcpu,pmem,rss,stat,tty,time,args
ghost plw !ps -ww -o user,pid,ppid,pcpu,pmem,rss,stat,tty,time,args
ghost pla !ps -A -o user,pid,ppid,pcpu,pmem,rss,stat,tty,time,args
ghost plaw !ps -A -ww -o user,pid,ppid,pcpu,pmem,rss,stat,tty,time,args
.Ed
.Pp
When storing passwords in \*(ur appropriate permissions should be set on
this file with `$ chmod 0600 \*(ur'.
If the \*(OPal
.Va netrc-lookup
is available user credentials can be stored in the central
.Pa .netrc
file instead; e.g., here is a different version of the example account
that sets up SMTP and POP3:
.Bd -literal -offset indent
account XandeX {
   localopts 1
   set netrc-lookup
   #set agent-shell-lookup="gpg -d .pass.gpg"

   set smtp=smtps://smtp.yXXXXx.ru:465 smtp-auth=plain \e
       smtp-hostname= hostname=yXXXXx.com
   set pop3-keepalive=240
   ghost xp 'fi pop3s://pop.yXXXXx.ru'
}
.Ed
.Pp
and, in the
.Pa .netrc
file:
.Bd -literal -offset indent
machine *.yXXXXx.ru login USER password PASS
.Ed
.Pp
If the also \*(OPal
.Va agent-shell-lookup
is available things could be diversified further by using encrypted
password storage: for this, don't specify `password PASS' in the
.Pa .netrc
file and instead uncomment the line that defines agent lookup in the
example
.Ic account
above, then create the encrypted password storage file
.Pa .pass.gpg :
.Bd -literal -offset indent
$ echo PASS > .pass
$ gpg -e .pass
$ eval `gpg-agent --daemon \e
        --pinentry-program=/usr/bin/pinentry-curses \e
        --max-cache-ttl 99999 --default-cache-ttl 99999`
.Ed
.Pp
This configuration should now work just fine (use the
.Fl d
command line option for a(n almost) dry-run):
.Pp
.Dl $ echo text | \*(ua -vv -AXandeX -s Subject some@where
.\" }}}
.\"
.\" .Ss "Sending mail from scripts" {{{
.Ss "Sending mail from scripts"
If you want to send mail from scripts, you must be aware that \*(UA
reads the user's configuration files by default.
So unless your script is only intended for your own personal use
(as, e.g., a cron job), you need to circumvent this:
.Pp
.Dl MAILRC=/dev/null LC_ALL=en_US.UTF-8 \*(ua \-n
.Pp
You then need to create a script-local configuration for \*(UA.
This can be done by either pointing the
.Ev MAILRC
variable to a custom configuration file,
by passing the configuration in environment variables,
or by using the
.Fl S
command line option to specify options.
Since many configuration options are not valid shell variables, the
.Xr env 1
command is useful if the approach via environment variables is used:
.Bd -literal -offset indent
env MAILRC=/dev/null LC_ALL=C password=secret \*(ua -n -Sv15-compat \e
    -S 'smtp=smtps://mylogin@some.host:465' -Ssmtp-auth=login \e
    -S 'from=scriptreply@domain' \e
    -s 'subject' -a attachment_file recipient@domain < content_file
.Ed
.\" }}}
.\"
.\" .Ss "IMAP or POP3 client setup" {{{
.Ss "IMAP or POP3 client setup"
\*(OP First you need the following data from your ISP:
the host name of the IMAP or POP3 server,
user name and password for this server,
and a notice whether the server uses SSL/TLS encryption.
Assuming the SSL/TLS secured host name of your IMAP account is
`server.myisp.example' and your user name for that server is `mylogin',
you could refer to this account using the
.Ic file
command or the
.Fl f
command line option with
.Pp
.Dl imaps://mylogin@server.myisp.example
.Pp
(This string is not necessarily the same as your Internet mail address.)
Even if the server does not accept IMAPS or POP3S connections,
it is possible that it supports the `STARTTLS' method of upgrading
already connected, but not yet authenticated sessions to use SSL/TLS
encryption.
The only reliable method to see if this works is to try it; enter one of
.Pp
.Dl set imap-use-starttls
.Dl set pop3-use-starttls
.Pp
before you initiate the connection, dependent on the actual protocol.
.Pp
The
.Ic shortcut
command can be used to avoid typing that many characters every time you
want to connect:
.Pp
.Dl shortcut myisp %:imaps://mylogin@server.myisp.example
.Pp
You might want to put this string into a startup file.
.Ic shortcut
is one of those commands that are specific to \*(UA and will thus
confuse other implementations of POSIX
.Xr mailx 1 ,
so it should possibly not be placed in \*(ur.
Instead, put
.Pp
.Dl set NAIL_EXTRA_RC=.\*(uarc
.Pp
in \*(ur and create a file
.Pa ~/.\*(uarc
containing all the commands that are specific to \*(UA.
You can then access your remote mailbox by invoking
.Pp
.Dl \*(ua \-f myisp
.Pp
on the command line, or by executing
.Pp
.Dl fi myisp
.Pp
within \*(UA.
If you want to use more than one IMAP mailbox on a server,
or if you want to use the IMAP server for mail storage too, the
.Ic account
command (which is also \*(UA-specific) is possibly more appropriate.
You can put the following in
.Pa ~/.\*(uarc :
.Bd -literal -offset indent
account myisp {
   set folder=imaps://mylogin@server.myisp.example
   set record=+Sent MBOX=+mbox outfolder
}
.Ed
.Pp
and can then access incoming mail for this account by invoking
`\*(ua \-A myisp' on the command line or by executing `ac myisp' within
\*(UA.
After that, a command like `copy 1 +otherfolder' will refer to
`otherfolder' on the IMAP server.
In particular, `fi&' will change to the `mbox' folder,
and `fi+Sent' will show your recorded sent mail,
with both folders located on the IMAP server.
.Pp
\*(UA will ask you for a password string each time you connect to
a remote account.
If you can reasonably trust the security of your workstation,
you can give this password in the startup file as
.Pp
.Dl set password-mylogin@server.myisp.example="SECRET"
.Pp
You should change the permissions of this file to 0600, see
.Xr chmod 1 .
.Pp
\*(UA supports different authentication methods for both IMAP and POP3.
If Kerberos is used at your location,
you can try to activate (the optional) GSS-API based authentication via
.Pp
.Dl set imap-auth=gssapi
.Pp
The advantage of this method is that \*(UA doesn't need to know your
password at all, nor does it have to send sensitive data over the network.
If that isn't possible, try to use authentication methods that at least
avoid sending the password in clear over the wire, which is especially
important if SSL/TLS cannot be used, e.g.,
.Pp
.Dl set imap-auth=cram-md5
.Pp
For POP3 \*(UA will try to use the `APOP' mechanism automatically unless
explicitly disabled.
If the server does not offer any such authentication methods,
conventional user/password based authentication must be used.
It is sometimes helpful, especially when setting up an account or when
there are authentification problems, to enable verbosity by setting the
.Va verbose
option \(en \*(UA will display all data sent to the server in clear text
on the screen when this option is set.
(Because this may also include passwords you should take care that no
unauthorized person can look at your terminal when this option is set.)
.Pp
If you regularly use the same workstation to access IMAP accounts,
you can greatly enhance performance by enabling local caching of IMAP
messages.
For any message that has been fully or partially fetched from the server,
a local copy is made and is used when the message is accessed again,
so most data is transferred over the network once only.
To enable the IMAP cache, select a local directory name and put
.Pp
.Dl set imap-cache=~/localdirectory
.Pp
in the (\*(UA-specific) startup file.
All files within that directory can be overwritten or deleted by \*(UA
at any time,
so you should not use the directory to store other information.
.Pp
Once the cache contains some messages,
it is not strictly necessary anymore to open a connection to the IMAP
server to access them.
When \*(UA is invoked with the option
.Fl D ,
or when the
.Va disconnected
variable is set,
only cached data is used for any folder you open.
Messages that have not yet been completely cached are not available
then, but all other messages can be handled as usual.
Changes made to IMAP mailboxes in
.Va disconnected
mode are committed to the IMAP server next time it is being connected to.
Synchronizing the local status with the status on the server is thus
partially within your responsibility;
if you forget to initiate a connection to the server again before you
leave your location,
changes made on one workstation are not available on others.
Also if you alter IMAP mailboxes from a workstation while uncommitted
changes are still pending on another,
the latter data may become invalid.
The same might also happen because of internal server status changes.
You should thus carefully evaluate this feature in your environment
before you rely on it.
.Pp
Many servers will close the connection after a short period of
inactivity \(en use one of
.Pp
.Dl set pop3-keepalive=30
.Dl set imap-keepalive=240
.Pp
to send a keepalive message each 30 seconds for POP3,
or each 4 minutes for IMAP.
.Pp
If you encounter problems connecting to a SSL/TLS server,
try the
.Va ssl-rand-egd
and
.Va ssl-rand-file
variables (see the OpenSSL FAQ for more information) or specify the
protocol version with
.Va ssl-method .
Contact your ISP if you need a client certificate or if verification of
the server certificate fails.
If the failed certificate is indeed valid,
fetch its CA certificate by executing the shell command
.Pp
.Dl $ </dev/null openssl s_client \-showcerts \-connect \e
.Dl \ \ \ \ \ \ server.myisp.example:imaps 2>&1 | tee log.txt
.Pp
(see
.Xr s_client 1 Ns
) and put it into the file specified with
.Va ssl-ca-file .
The data you need is located at the end of the certificate chain
within (and including) the `BEGIN CERTIFICATE'
and `END CERTIFICATE' lines.
Note that the example above is \fBinsecure\fR!
One should use the `-verify' and `-CAfile' options of
.Xr s_client 1
to be "on the safe side" regarding the fetched certificates.
.\" }}}
.\"
.\" .Ss "Signed and encrypted messages with S/MIME" {{{
.Ss "Signed and encrypted messages with S/MIME"
\*(OP S/MIME provides two central mechanisms:
message signing and message encryption.
A signed message contains some data in addition to the regular text.
The data can be used to verify that the message was sent using a valid
certificate, that the sender's address in the message header matches
that in the certificate, and that the message text has not been altered.
Signing a message does not change its regular text;
it can be read regardless of whether the recipient's software is able to
handle S/MIME.
It is thus usually possible to sign all outgoing messages if so desired.
Encryption, in contrast, makes the message text invisible for all people
except those who have access to the secret decryption key.
To encrypt a message, the specific recipient's public encryption key
must be known.
It is thus not possible to send encrypted mail to people unless their
key has been retrieved from either previous communication or public key
directories.
A message should always be signed before it is encrypted.
Otherwise, it is still possible that the encrypted message text is
altered.
.Pp
A central concept to S/MIME is that of the certification authority (CA).
A CA is a trusted institution that issues certificates.
For each of these certificates it can be verified that it really
originates from the CA, provided that the CA's own certificate is
previously known.
A set of CA certificates is usually delivered with OpenSSL and installed
on your system.
If you trust the source of your OpenSSL software installation,
this offers reasonable security for S/MIME on the Internet.
In general, a certificate cannot be more secure than the method its CA
certificate has been retrieved with, though.
Thus if you download a CA certificate from the Internet,
you can only trust the messages you verify using that certificate as
much as you trust the download process.
.Pp
The first thing you need for participating in S/MIME message exchange is
your personal certificate, including a private key.
The certificate contains public information, in particular your name and
your email address, and the public key that is used by others to encrypt
messages for you,
and to verify signed messages they supposedly received from you.
The certificate is included in each signed message you send.
The private key must be kept secret.
It is used to decrypt messages that were previously encrypted with your
public key, and to sign messages.
.Pp
For personal use it is recommended that you get a S/MIME certificate
from one of the major CAs on the Internet using your WWW browser.
(Many CAs offer such certificates for free.)
You will usually receive a combined certificate and private key in
PKCS#12 format which \*(UA does not directly accept.
To convert it to PEM format, use the following shell command:
.Pp
.Dl $ openssl pkcs12 \-in cert.p12 \-out cert.pem \-clcerts \-nodes
.Pp
If you omit the `\-nodes' parameter, you can specifiy an additional `PEM
pass phrase' for protecting the private key.
\*(UA will then ask you for that pass phrase each time it signs or
decrypts a message.
You can then use
.Pp
.Dl set smime-sign-cert-myname@myisp.example=cert.pem
.Pp
to make this private key and certificate known to \*(UA.
You can now sign outgoing messages.
Just use
.Pp
.Dl set smime-sign
.Pp
to do so.
From each signed message you send,
the recipient can fetch your certificate and use it to send encrypted
mail back to you.
Accordingly if somebody sends you a signed message, you can do the same.
First use the
.Ic verify
command to check the validity of the certificate.
After that, retrieve the certificate and tell \*(UA that it should use
it for encryption:
.Pp
.Dl certsave filename
.Dl set smime-encrypt-USER@HOST=filename
.Pp
You should carefully consider if you prefer to store encrypted messages
in decrypted form.
If you do, anybody who has access to your mail folders can read them,
but if you do not, you might be unable to read them yourself later if
you happen to lose your private key.
The
.Ic decrypt
command saves messages in decrypted form, while the
.Ic save ,
.Ic copy ,
and
.Ic move
commands leave them encrypted.
.Pp
Note that neither S/MIME signing nor encryption applies to message
subjects or other header fields.
Thus they may not contain sensitive information for encrypted messages,
and cannot be trusted even if the message content has been verified.
When sending signed messages,
it is recommended to repeat any important header information in the
message text.
.\" }}}
.\"
.\" .Ss "Using CRLs with S/MIME or SSL/TLS" {{{
.Ss "Using CRLs with S/MIME or SSL/TLS"
\*(OP Certification authorities (CAs) issue certificate revocation
lists (CRLs) on a regular basis.
These lists contain the serial numbers of certificates that have been
declared invalid after they have been issued.
Such usually happens because the private key for the certificate has
been compromised,
because the owner of the certificate has left the organization that is
mentioned in the certificate, etc.
To seriously use S/MIME or SSL/TLS verification,
an up-to-date CRL is required for each trusted CA.
There is otherwise no method to distinguish between valid and
invalidated certificates.
\*(UA currently offers no mechanism to fetch CRLs, nor to access them on
the Internet, so you have to retrieve them by some external mechanism.
.Pp
\*(UA accepts CRLs in PEM format only;
CRLs in DER format must be converted, like, e.\|g.:
.Pp
.Dl $ openssl crl \-inform DER \-in crl.der \-out crl.pem
.Pp
To tell \*(UA about the CRLs, a directory that contains all CRL files
(and no other files) must be created.
The
.Va smime-crl-dir
or
.Va ssl-crl-dir
variables, respectively, must then be set to point to that directory.
After that, \*(UA requires a CRL to be present for each CA that is used
to verify a certificate.
.\" }}}
.\"
.\" .Ss "Handling spam" {{{
.Ss "Handling spam"
\*(OP \*(UA can make use of spam detection and learning facilities \(en
more precisely, SpamAssassin (\%<http://spamassassin.apache.org>).
A very comprehensive documentation of
.Xr spamassassin 1
can be found at the O'Reilly Commons
(\%<http://commons.oreilly.com/wiki/index.php/SpamAssassin>).
.Pp
Currently \*(UA supports interaction with
.Xr spamassassin 1
only via its daemonized
.Xr spamd 1 /
.Xr spamc 1
server / client pair, which means that, in order to detect and work
with spam through \*(UA, an instance of the
.Xr spamd 1
daemon must be running (the examples are equivalent):
.Bd -literal -offset indent
$ spamd -i localhost:2142 -i /tmp/.spamsock -d [-L] [-l]
$ spamd --listen=localhost:2142 --listen=/tmp/.spamsock \\
    --daemonize [--local] [--allow-tell]
.Ed
.Pp
Note that if
.Xr spamd 1
should only listen on a local, path-based UNIX domain socket instead of
offering its service over the network, it maybe necessary to use
a single
.Li --socketpath
option instead of the shown
.Li --listen .
In order to support training of the Bayesian classifier through \*(UA,
.Xr spamd 1
must have been started with the
.Li --allow-tell
option.
.Pp
Once
.Xr spamd 1
is running \*(UA can classify messages by using the client side program,
.Xr spamc 1 ,
as in:
.Bd -literal -offset indent
$ \*(ua -Sspam-command=/usr/local/bin/spamc \\
    -Sspam-socket=/tmp/.spamsock -Sspam-maxsize=500000
.Ed
.Pp
The commands offered are
.Ic spamclear
and
.Ic spamset ,
which simply set an `is-spam' flag that can be used for, e.g., message
selection,
.Ic spamrate ,
which passes messages through to the spam detector in order to gain
a spam score and conditionally set the `is-spam' flag accordingly,
as well as the Bayesian filter related
.Ic spamforget ,
.Ic spamham
and
.Ic spamspam .
.Pp
Because messages must exist on local storage in order to be scored (or
used for Bayesian filter training), it is possibly a good idea to
perform the local spam check last:
.Bd -literal -offset indent
define spamdelhook {
	# Server side DCC
	spamset (header x-dcc-brand-metrics "bulk")
	# Server-side spamassassin(1)
	spamset (header x-spam-flag "YES")
	del :s # TODO we HAVE to be able to do `spamrate :u ! :s'
	# And finally the local spamc(1)
	spamrate :u
	del :s
}
set folder-hook-FOLDER=spamdelhook
.Ed
.Pp
See also the documentation for the variables
.Va spam-command ,
.Va spam-host ,
.Va spam-port ,
.Va spam-socket ,
.Va spam-user
and
.Va spam-maxsize .
.\" }}}
.\" }}} (Examples)
.\"
.\" .Sh "SEE ALSO" {{{
.Sh "SEE ALSO"
.Xr bzip2 1 ,
.Xr file 1 ,
.Xr fmt 1 ,
.Xr gpg-agent 1 ,
.Xr gpg 1 ,
.Xr gzip 1 ,
.Xr less 1 ,
.Xr more 1 ,
.Xr newaliases 1 ,
.Xr openssl 1 ,
.Xr printf 1 ,
.Xr sendmail 1 ,
.Xr sh 1,
.Xr spamassassin 1 ,
.Xr spamc 1 ,
.Xr spamd 1 ,
.Xr vacation 1 ,
.Xr xz 1 ,
.Xr editline 3 ,
.Xr iconv 3 ,
.Xr readline 3 ,
.Xr setlocale 3 ,
.Xr ssl 3 ,
.Xr aliases 5 ,
.Xr locale 7 ,
.Xr mailaddr 7 ,
.Xr re_format 7 ,
.Xr mailwrapper 8 ,
.Xr xterm 1
.\" }}}
.\"
.\" .Sh "IMPLEMENTATION NOTES" {{{
.Sh "IMPLEMENTATION NOTES"
The character set conversion uses and relies upon the
.Xr iconv 3
function.
Its functionality differs widely between the various system environments
\*(UA runs on.
.Pp
Limitations with IMAP mailboxes are:
It is not possible to edit messages, but it is possible to append them.
Thus to edit a message, create a local copy of it, edit it, append it,
and delete the original.
The line count for the header display is only appropriate if the entire
message has been downloaded from the server.
The marking of messages as `new' is performed by the IMAP server;
use of the
.Ic exit
command instead of
.Ic quit
will not cause it to be reset, and if the
.Va newmail
variable is unset, messages that arrived during a session will not be
in state `new' anymore when the folder is opened again.
Also if commands queued in disconnected mode are committed,
the IMAP server will delete the `new' flag for all messages in the
changed folder,
and new messages will appear as unread when it is selected for viewing
later.
The `flagged', `answered', and `draft' attributes are usually permanent,
but some IMAP servers are known to drop them without notification.
Message numbers may change with IMAP every time before the prompt is
printed if \*(UA is notified by the server that messages have been
deleted by some other client or process.
In this case, `Expunged n messages' is printed, and message numbers may
have changed.
.Pp
Limitations with POP3 mailboxes are:
It is not possible to edit messages, they can only be copied and deleted.
The line count for the header display is only appropriate if the entire
message has been downloaded from the server.
The status field of a message is maintained by the server between
connections; some servers do not update it at all, and with a server
that does, the `exit' command will not cause the message status to be
reset.
The `newmail' command and the `newmail' variable have no effect.
It is not possible to rename or to remove POP3 mailboxes.
.Pp
If a `RUBOUT' (interrupt, `control-C') is typed while an IMAP or POP3
operation is in progress, \*(UA will wait until the operation can be
safely aborted,
and will then return to the command loop and print the prompt again.
When a second `RUBOUT' is typed while \*(UA is waiting for the operation
to complete, the operation itself will be cancelled.
In this case, data that has not been fetched yet will have to be fetched
before the next command can be performed.
If the cancelled operation was using an SSL/TLS encrypted channel,
an error in the SSL transport will very likely result and render the
connection unusable.
.Pp
As \*(UA is a mail user agent, it provides only basic SMTP services.
If it fails to contact its upstream SMTP server, it will not make
further attempts to transfer the message at a later time,
and it does not leave other information about this condition than an
error message on the terminal and an entry in
.Ev DEAD .
This is usually not a problem if the SMTP server is located in the same
local network as the computer on which \*(UA is run.
However, care should be taken when using a remote server of an ISP;
it might be better to set up a local SMTP server then which just acts as
a proxy.
.Pp
\*(UA immediately contacts the SMTP server (or
.Xr sendmail 1 Ns
) even when operating in
.Va disconnected
mode.
It would not make much sense for \*(UA to defer outgoing mail since SMTP
servers usually provide much more elaborated delay handling than \*(UA
could perform as a client.
Thus the recommended setup for sending mail in
.Va disconnected
mode is to configure a local SMTP server such that it sends outgoing
mail as soon as an external network connection is available again,
i.e., to advise it to do that from a network startup script.
.\" }}}
.\"
.\" .Sh HISTORY {{{
.Sh HISTORY
A \fImail\fR command appeared in Version 1 AT&T Unix.
Berkeley Mail was written in 1978 by Kurt Shoens.
This man page is derived from from The Mail Reference Manual originally
written by Kurt Shoens.
"Heirloom Mailx" enhancements are maintained and documented by Gunnar
Ritter.
"S-nail" is maintained and documented by Steffen (Daode) Nurpmeso.
.Pp
Portions of this text are reprinted and reproduced in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
\(en Operating System Interface (POSIX), The Open Group Base
Specifications Issue 6, Copyright \(co 2001-2003 by the Institute of
Electrical and Electronics Engineers, Inc and The Open Group.
In the event of any discrepancy between this version and the original
IEEE and The Open Group Standard, the original IEEE and The Open Group
Standard is the referee document.
The original Standard can be obtained online at
\%<http://www.opengroup.org/unix/online.html>.
Redistribution of this material is permitted so long as this notice
remains intact.
.\" }}}
.\"
.Sh AUTHORS
.An "Kurt Shoens" ,
.An "Christos Zoulas" ,
.An "Gunnar Ritter" ,
.An Steffen Po Daode Pc Nurpmeso Aq s-nail-users@lists.sourceforge.net
.\"
.Sh BUGS
Too many (see the file `TODO' from the distribution or the repository).
.\" s-ts-mode
