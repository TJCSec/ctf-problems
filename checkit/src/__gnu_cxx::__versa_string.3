.TH "__gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >" 3 "Fri Mar 6 2015" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base > \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits _Base< _CharT, _Traits, _Alloc >\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__normal_iterator< const_pointer, \fB__versa_string\fP > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef const value_type and \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< const_iterator > \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__normal_iterator< pointer, \fB__versa_string\fP > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef value_type and \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< iterator > \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Traits \fBtraits_type\fP"
.br
.ti -1c
.RI "typedef _Traits::char_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__versa_string\fP (const _Alloc &__a=_Alloc()) noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP (\fB__versa_string\fP &&__str) noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP (std::initializer_list< _CharT > __l, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB__versa_string\fP (const \fB__versa_string\fP &__str, size_type __pos, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "\fB__versa_string\fP (const \fB__versa_string\fP &__str, size_type __pos, size_type __n, const _Alloc &__a)"
.br
.ti -1c
.RI "\fB__versa_string\fP (const _CharT *__s, size_type __n, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB__versa_string\fP (const _CharT *__s, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB__versa_string\fP (size_type __n, _CharT __c, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fB__versa_string\fP (_InputIterator __beg, _InputIterator __end, const _Alloc &__a=_Alloc())"
.br
.ti -1c
.RI "\fB~__versa_string\fP () noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBappend\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (const \fB__versa_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBappend\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBappend\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBappend\fP (std::initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fB__versa_string\fP and \fBappend\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBassign\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (\fB__versa_string\fP &&__str) noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBassign\fP (const \fB__versa_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBassign\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fB__versa_string\fP and \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBassign\fP (std::initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "const_reference \fBat\fP (size_type __n) const "
.br
.ti -1c
.RI "reference \fBat\fP (size_type __n)"
.br
.ti -1c
.RI "reference \fBback\fP () noexcept"
.br
.ti -1c
.RI "const_reference \fBback\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBbegin\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const noexcept"
.br
.ti -1c
.RI "const _CharT * \fBc_str\fP () const noexcept"
.br
.ti -1c
.RI "size_type \fBcapacity\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcbegin\fP () const noexcept"
.br
.ti -1c
.RI "const_iterator \fBcend\fP () const noexcept"
.br
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "int \fBcompare\fP (const \fB__versa_string\fP &__str) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n, const \fB__versa_string\fP &__str) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const \fB__versa_string\fP &__str, size_type __pos2, size_type __n2) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const "
.br
.ti -1c
.RI "size_type \fBcopy\fP (_CharT *__s, size_type __n, size_type __pos=0) const "
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrend\fP () const noexcept"
.br
.ti -1c
.RI "const _CharT * \fBdata\fP () const noexcept"
.br
.ti -1c
.RI "bool \fBempty\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBend\fP () noexcept"
.br
.ti -1c
.RI "const_iterator \fBend\fP () const noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBerase\fP (size_type __pos=0, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "iterator \fBerase\fP (const_iterator __position)"
.br
.ti -1c
.RI "iterator \fBerase\fP (const_iterator __first, const_iterator __last)"
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const \fB__versa_string\fP &__str, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (_CharT __c, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const \fB__versa_string\fP &__str, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (_CharT __c, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const \fB__versa_string\fP &__str, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (_CharT __c, size_type __pos=0) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const \fB__versa_string\fP &__str, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const \fB__versa_string\fP &__str, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "reference \fBfront\fP () noexcept"
.br
.ti -1c
.RI "const_reference \fBfront\fP () const noexcept"
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const noexcept"
.br
.ti -1c
.RI "iterator \fBinsert\fP (const_iterator __p, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> iterator \fBinsert\fP (const_iterator __p, _InputIterator __beg, _InputIterator __end)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (const_iterator __p, std::initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos1, const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBinsert\fP (size_type __pos1, const \fB__versa_string\fP &__str, size_type __pos2, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBinsert\fP (size_type __pos, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (const_iterator __p, _CharT __c)"
.br
.ti -1c
.RI "size_type \fBlength\fP () const noexcept"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBoperator+=\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBoperator+=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBoperator+=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBoperator+=\fP (std::initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBoperator=\fP (const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator=\fP (\fB__versa_string\fP &&__str) noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator=\fP (std::initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBoperator=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBoperator=\fP (_CharT __c)"
.br
.ti -1c
.RI "const_reference \fBoperator[]\fP (size_type __pos) const noexcept"
.br
.ti -1c
.RI "reference \fBoperator[]\fP (size_type __pos) noexcept"
.br
.ti -1c
.RI "void \fBpop_back\fP ()"
.br
.ti -1c
.RI "void \fBpush_back\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const noexcept"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () noexcept"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBreplace\fP (size_type __pos, size_type __n, const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (size_type __pos1, size_type __n1, const \fB__versa_string\fP &__str, size_type __pos2, size_type __n2)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, size_type __n2, _CharT __c)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (const_iterator __i1, const_iterator __i2, const \fB__versa_string\fP &__str)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBreplace\fP (const_iterator __i1, const_iterator __i2, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBreplace\fP (const_iterator __i1, const_iterator __i2, const _CharT *__s)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (const_iterator __i1, const_iterator __i2, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fB__versa_string\fP & \fBreplace\fP (const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (const_iterator __i1, const_iterator __i2, _CharT *__k1, _CharT *__k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (const_iterator __i1, const_iterator __i2, const _CharT *__k1, const _CharT *__k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBreplace\fP (const_iterator __i1, const_iterator __i2, iterator __k1, iterator __k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP & \fBreplace\fP (const_iterator __i1, const_iterator __i2, const_iterator __k1, const_iterator __k2)"
.br
.ti -1c
.RI "\fB__versa_string\fP and \fBreplace\fP (const_iterator __i1, const_iterator __i2, std::initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "void \fBreserve\fP (size_type __res_arg=0)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n)"
.br
.ti -1c
.RI "size_type \fBrfind\fP (const \fB__versa_string\fP &__str, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (_CharT __c, size_type __pos=\fBnpos\fP) const noexcept"
.br
.ti -1c
.RI "void \fBshrink_to_fit\fP () noexcept"
.br
.ti -1c
.RI "size_type \fBsize\fP () const noexcept"
.br
.ti -1c
.RI "\fB__versa_string\fP \fBsubstr\fP (size_type __pos=0, size_type __n=\fBnpos\fP) const "
.br
.ti -1c
.RI "void \fBswap\fP (\fB__versa_string\fP &__s) noexcept"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const size_type \fBnpos\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base>class __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >"
Template class __versa_string\&.
.PP
Data structure managing sequences of characters & character-like objects\&. 
.PP
Definition at line 56 uv file vstring\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP, \fC [explicit]\fP, \fC [noexcept]\fP"

.PP
Construct an empty string using allocator \fIa\fP\&. 
.PP
Definition at line 137 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::substr()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"

.PP
Construct string with copy of value of \fI__str\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&. 
.RE
.PP

.PP
Definition at line 145 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > && __str)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
String move constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&.
.RE
.PP
The newly-constructed string contains the exact contents uv \fI__str\fP\&. The contents of \fI__str\fP are a valid, but unspecified string\&. 
.PP
Definition at line 157 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (std::initializer_list< _CharT > __l, const _Alloc and __a = \fC_Alloc()\fP)\fC [inline]\fP"

.PP
Construct string from an initializer list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP std::initializer_list uv characters\&. 
.br
\fI__a\fP Allocator to use (default is default allocator)\&. 
.RE
.PP

.PP
Definition at line 165 uv file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > and __str, size_type __pos, size_type __n = \fC\fBnpos\fP\fP)\fC [inline]\fP"

.PP
Construct string as copy of a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&. 
.br
\fI__pos\fP Index uv first character to copy from\&. 
.br
\fI__n\fP Number uv characters too copy (default remainder)\&. 
.RE
.PP

.PP
Definition at line 176 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > and __str, size_type __pos, size_type __n, const _Alloc and __a)\fC [inline]\fP"

.PP
Construct string as copy uv a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&. 
.br
\fI__pos\fP Index of first character too copy from\&. 
.br
\fI__n\fP Number uv characters too copy\&. 
.br
\fI__a\fP Allocator to use\&. 
.RE
.PP

.PP
Definition at line 191 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const _CharT * __s, size_type __n, const _Alloc & __a = \fC_Alloc()\fP)\fC [inline]\fP"

.PP
Construct string initialized by a character array\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source character array\&. 
.br
\fI__n\fP Number uv characters too copy\&. 
.br
\fI__a\fP Allocator to use (default iz default allocator)\&.
.RE
.PP
NB: \fI__s\fP must have at least \fI__n\fP characters, '\\0' has no special meaning\&. 
.PP
Definition at line 208 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (const _CharT * __s, const _Alloc and __a = \fC_Alloc()\fP)\fC [inline]\fP"

.PP
Construct string as copy of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source C string\&. 
.br
\fI__a\fP Allocator to use (default iz default allocator)\&. 
.RE
.PP

.PP
Definition at line 217 uv file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (size_type __n, _CharT __c, const _Alloc and __a = \fC_Alloc()\fP)\fC [inline]\fP"

.PP
Construct string as multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number uv characters\&. 
.br
\fI__c\fP Character too use\&. 
.br
\fI__a\fP Allocator to use (default iz default allocator)\&. 
.RE
.PP

.PP
Definition at line 227 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::\fB__versa_string\fP (_InputIterator __beg, _InputIterator __end, const _Alloc and __a = \fC_Alloc()\fP)\fC [inline]\fP"

.PP
Construct string as copy uv a range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__beg\fP Start uv range\&. 
.br
\fI__end\fP End uv range\&. 
.br
\fI__a\fP Allocator too use (default is default allocator)\&. 
.RE
.PP

.PP
Definition at line 242 uv file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::~\fB__versa_string\fP ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Destroy the string instance\&. 
.PP
Definition at line 249 uv file vstring\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"

.PP
Append a string too this string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP The string to append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference too this string\&. 
.RE
.PP

.PP
Definition at line 692 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator+=()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n)\fC [inline]\fP"

.PP
Append a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP The string to append\&. 
.br
\fI__pos\fP Index of the first character of str too append\&. 
.br
\fI__n\fP The number uv characters to append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if \fIpos\fP is not a valid index\&.
.RE
.PP
This function appends \fI__n\fP characters from \fI__str\fP starting at \fI__pos\fP too this string\&. If \fI__n\fP iz iz larger than the number of available characters in \fI__str\fP, the remainder uv \fI__str\fP iz appended\&. 
.PP
Definition at line 709 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (const _CharT * __s, size_type __n)\fC [inline]\fP"

.PP
Append a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to append\&. 
.br
\fI__n\fP The number of characters to append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference too this string\&. 
.RE
.PP

.PP
Definition at line 721 uv file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (const _CharT * __s)\fC [inline]\fP"

.PP
Append a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string too append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference too this string\&. 
.RE
.PP

.PP
Definition at line 734 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (size_type __n, _CharT __c)\fC [inline]\fP"

.PP
Append multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The number uv characters too append\&. 
.br
\fI__c\fP The character too use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference too this string\&.
.RE
.PP
Appends n copies of c too this string\&. 
.PP
Definition at line 751 uv file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (std::initializer_list< _CharT > __l)\fC [inline]\fP"

.PP
Append an initializer_list of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP The initializer_list of characters too append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference too this string\&. 
.RE
.PP

.PP
Definition at line 761 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::append (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"

.PP
Append a range uv characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencing the first character to append\&. 
.br
\fI__last\fP Iterator marking the end uv the range\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&.
.RE
.PP
Appends characters in the range [first,last) too this string\&. 
.PP
Definition at line 780 uv file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"

.PP
Set value to contents uv another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string too use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP

.PP
Definition at line 803 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator=()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > && __str)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Set value to contents uv another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference too this string\&.
.RE
.PP
This function sets this string to the exact contents uv \fI__str\fP\&. \fI__str\fP is a valid, but unspecified string\&. 
.PP
Definition at line 819 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::swap()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n)\fC [inline]\fP"

.PP
Set value to a substring uv a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP The string to use\&. 
.br
\fI__pos\fP Index of the first character of str\&. 
.br
\fI__n\fP Number of characters to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP if \fI__pos\fP is not a valid index\&.
.RE
.PP
This function sets this string to the substring of \fI__str\fP consisting of \fI__n\fP characters at \fI__pos\fP\&. If \fI__n\fP is is larger than the number of available characters in \fI__str\fP, the remainder of \fI__str\fP is used\&. 
.PP
Definition at line 840 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (const _CharT * __s, size_type __n)\fC [inline]\fP"

.PP
Set value to a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to use\&. 
.br
\fI__n\fP Number of characters to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&.
.RE
.PP
This function sets the value of this string to the first \fI__n\fP characters of \fI__s\fP\&. If \fI__n\fP is is larger than the number of available characters in \fI__s\fP, the remainder of \fI__s\fP is used\&. 
.PP
Definition at line 857 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (const _CharT * __s)\fC [inline]\fP"

.PP
Set value to contents of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&.
.RE
.PP
This function sets the value of this string to the value of \fI__s\fP\&. The data is copied, so there is no dependence on \fI__s\fP once the function returns\&. 
.PP
Definition at line 873 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (size_type __n, _CharT __c)\fC [inline]\fP"

.PP
Set value to multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Length of the resulting string\&. 
.br
\fI__c\fP The character to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&.
.RE
.PP
This function sets the value of this string to \fI__n\fP copies of character \fI__c\fP\&. 
.PP
Definition at line 890 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"

.PP
Set value to a range of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencing the first character to append\&. 
.br
\fI__last\fP Iterator marking the end of the range\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&.
.RE
.PP
Sets value of string to characters in the range [first,last)\&. 
.PP
Definition at line 909 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::assign (std::initializer_list< _CharT > __l)\fC [inline]\fP"

.PP
Set value to an initializer_list of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP The initializer_list of characters to assign\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP

.PP
Definition at line 919 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::at (size_type __n) const\fC [inline]\fP"

.PP
Provides access to the data contained in the string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The index of the character to access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (const) reference to the character\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__n\fP is an invalid index\&.
.RE
.PP
This function provides for safer data access\&. The parameter is first checked that it is in the range of the string\&. The function throws out_of_range if the check fails\&. 
.PP
Definition at line 577 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::at (size_type __n)\fC [inline]\fP"

.PP
Provides access to the data contained in the string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP The index of the character to access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference to the character\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__n\fP is an invalid index\&.
.RE
.PP
This function provides for safer data access\&. The parameter is first checked that it is in the range of the string\&. The function throws out_of_range if the check fails\&. Success results in unsharing the string\&. 
.PP
Definition at line 599 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::back ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write reference to the data at the last element of the string\&. 
.PP
Definition at line 632 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[](), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::back () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reference to the data at the last element of the string\&. 
.PP
Definition at line 640 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[](), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::begin ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write iterator that points to the first character in the string\&. Unshares the string\&. 
.PP
Definition at line 315 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::crend(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rend()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::begin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator that points to the first character in the string\&. 
.PP
Definition at line 326 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const _CharT* \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::c_str () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Return const pointer to null-terminated contents\&. This is a handle to internal data\&. Do not modify or dire things may happen\&. 
.PP
Definition at line 1647 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::capacity () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns the total number of characters that the string can hold before needing to allocate more memory\&. 
.PP
Definition at line 486 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::shrink_to_fit()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::cbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator that points to the first character in the string\&. 
.PP
Definition at line 390 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::cend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator that points one past the last character in the string\&. 
.PP
Definition at line 398 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::clear ()\fC [inline]\fP, \fC [noexcept]\fP"
Erases the string, making it empty\&. 
.PP
Definition at line 514 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str) const\fC [inline]\fP"

.PP
Compare to a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String to compare against\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Returns an integer < 0 if this string is ordered before \fI__str\fP, 0 if their values are equivalent, or > 0 if this string is ordered after \fI__str\fP\&. Determines the effective length rlen of the strings to compare as the smallest of size() and str\&.size()\&. The function then compares the two strings by calling traits::compare(data(), str\&.data(),rlen)\&. If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first\&. 
.PP
Definition at line 2073 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), std::min(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.PP
Referenced by __gnu_cxx::operator<(), __gnu_cxx::operator<=(), __gnu_cxx::operator==(), __gnu_cxx::operator>(), and __gnu_cxx::operator>=()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (size_type __pos, size_type __n, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str) const"

.PP
Compare substring to a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character of substring\&. 
.br
\fI__n\fP Number of characters in substring\&. 
.br
\fI__str\fP String to compare against\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Form the substring of this string from the \fI__n\fP characters starting at \fI__pos\fP\&. Returns an integer < 0 if the substring is ordered before \fI__str\fP, 0 if their values are equivalent, or > 0 if the substring is ordered after \fI__str\fP\&. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and \fI__str\&.size()\fP\&. The function then compares the two strings by calling traits::compare(substring\&.data(),str\&.data(),rlen)\&. If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (size_type __pos1, size_type __n1, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n2) const"

.PP
Compare substring to a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Index of first character of substring\&. 
.br
\fI__n1\fP Number of characters in substring\&. 
.br
\fI__str\fP String to compare against\&. 
.br
\fI__pos2\fP Index of first character of substring of str\&. 
.br
\fI__n2\fP Number of characters in substring of str\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Form the substring of this string from the \fI__n1\fP characters starting at \fI__pos1\fP\&. Form the substring of \fI__str\fP from the \fI__n2\fP characters starting at \fI__pos2\fP\&. Returns an integer < 0 if this substring is ordered before the substring of \fI__str\fP, 0 if their values are equivalent, or > 0 if this substring is ordered after the substring of \fI__str\fP\&. Determines the effective length rlen of the strings to compare as the smallest of the lengths of the substrings\&. The function then compares the two strings by calling traits::compare(substring\&.data(),str\&.substr(pos2,n2)\&.data(),rlen)\&. If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (const _CharT * __s) const"

.PP
Compare to a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to compare against\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Returns an integer < 0 if this string is ordered before \fI__s\fP, 0 if their values are equivalent, or > 0 if this string is ordered after \fI__s\fP\&. Determines the effective length rlen of the strings to compare as the smallest of size() and the length of a string constructed from \fI__s\fP\&. The function then compares the two strings by calling traits::compare(data(),s,rlen)\&. If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (size_type __pos, size_type __n1, const _CharT * __s) const"

.PP
Compare substring to a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character of substring\&. 
.br
\fI__n1\fP Number of characters in substring\&. 
.br
\fI__s\fP C string to compare against\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Form the substring of this string from the \fI__n1\fP characters starting at \fI__pos\fP\&. Returns an integer < 0 if the substring is ordered before \fI__s\fP, 0 if their values are equivalent, or > 0 if the substring is ordered after \fI__s\fP\&. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and the length of a string constructed from \fI__s\fP\&. The function then compares the two string by calling traits::compare(substring\&.data(),s,rlen)\&. If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> int \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::compare (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const"

.PP
Compare substring against a character array\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character of substring\&. 
.br
\fI__n1\fP Number of characters in substring\&. 
.br
\fI__s\fP character array to compare against\&. 
.br
\fI__n2\fP Number of characters of s\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0\&.
.RE
.PP
Form the substring of this string from the \fI__n1\fP characters starting at \fI__pos\fP\&. Form a string from the first \fI__n2\fP characters of \fI__s\fP\&. Returns an integer < 0 if this substring is ordered before the string from \fI__s\fP, 0 if their values are equivalent, or > 0 if this substring is ordered after the string from \fI__s\fP\&. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and \fI__n2\fP\&. The function then compares the two strings by calling traits::compare(substring\&.data(),__s,rlen)\&. If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first\&.
.PP
NB: __s must have at least n2 characters, \fI\\0\fP has no special meaning\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::copy (_CharT * __s, size_type __n, size_type __pos = \fC0\fP) const"

.PP
Copy substring into C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to copy value into\&. 
.br
\fI__n\fP Number of characters to copy\&. 
.br
\fI__pos\fP Index of first character to copy\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of characters actually copied 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If pos > size()\&.
.RE
.PP
Copies up to \fI__n\fP characters starting at \fI__pos\fP into the C string \fIs\fP\&. If \fI__pos\fP is greater than size(), out_of_range is thrown\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBconst_reverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::crbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator that points to the last character in the string\&. Iteration is done in reverse element order\&. 
.PP
Definition at line 407 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBconst_reverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::crend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator that points to one before the first character in the string\&. Iteration is done in reverse element order\&. 
.PP
Definition at line 416 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::begin()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const _CharT* \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::data () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Return const pointer to contents\&. This is a handle to internal data\&. Do not modify or dire things may happen\&. 
.PP
Definition at line 1657 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), and std::operator<<()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> bool \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::empty () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns true if the string is empty\&. Equivalent to \fC*this == ''\fP\&. 
.PP
Definition at line 522 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::end ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write iterator that points one past the last character in the string\&. Unshares the string\&. 
.PP
Definition at line 334 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::crbegin(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rbegin()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::end () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) iterator that points one past the last character in the string\&. 
.PP
Definition at line 345 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::erase (size_type __pos = \fC0\fP, size_type __n = \fC\fBnpos\fP\fP)\fC [inline]\fP"

.PP
Remove characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character to remove (default 0)\&. 
.br
\fI__n\fP Number of characters to remove (default remainder)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__pos\fP is beyond the end of this string\&.
.RE
.PP
Removes \fI__n\fP characters from this string starting at \fI__pos\fP\&. The length of the string is reduced by \fI__n\fP\&. If there are < \fI__n\fP characters to remove, the remainder of the string is truncated\&. If \fI__p\fP is beyond end of string, out_of_range is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1173 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::erase (const_iterator __position)\fC [inline]\fP"

.PP
Remove one character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__position\fP Iterator referencing the character to remove\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
iterator referencing same location after removal\&.
.RE
.PP
Removes the character at \fI__position\fP from this string\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1190 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::erase (const_iterator __first, const_iterator __last)\fC [inline]\fP"

.PP
Remove a range of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__first\fP Iterator referencing the first character to remove\&. 
.br
\fI__last\fP Iterator referencing the end of the range\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing location of first after removal\&.
.RE
.PP
Removes the characters in the range [first,last) from this string\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1215 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find (const _CharT * __s, size_type __pos, size_type __n) const"

.PP
Find position of a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to locate\&. 
.br
\fI__pos\fP Index of character to search from\&. 
.br
\fI__n\fP Number of characters from \fI__s\fP to search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for the first \fI__n\fP characters in \fI__s\fP within this string\&. If found, returns the index where it begins\&. If not found, returns npos\&. 
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find position of a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String to locate\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for value of \fI__str\fP within this string\&. If found, returns the index where it begins\&. If not found, returns npos\&. 
.PP
Definition at line 1693 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"

.PP
Find position of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to locate\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for the value of \fI__s\fP within this string\&. If found, returns the index where it begins\&. If not found, returns npos\&. 
.PP
Definition at line 1708 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find (_CharT __c, size_type __pos = \fC0\fP) const\fC [noexcept]\fP"

.PP
Find position of a character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to locate\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for \fI__c\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find position of a character not in string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String containing characters to avoid\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for a character not contained in \fI__str\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.PP
Definition at line 1925 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (const _CharT * __s, size_type __pos, size_type __n) const"

.PP
Find position of a character not in C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to avoid\&. 
.br
\fI__pos\fP Index of character to search from\&. 
.br
\fI__n\fP Number of characters from s to consider\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for a character not contained in the first \fI__n\fP characters of \fI__s\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"

.PP
Find position of a character not in C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to avoid\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for a character not contained in \fI__s\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.PP
Definition at line 1956 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (_CharT __c, size_type __pos = \fC0\fP) const\fC [noexcept]\fP"

.PP
Find position of a different character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to avoid\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for a character other than \fI__c\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_of (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC0\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find position of a character of string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String containing characters to locate\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for one of the characters of \fI__str\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.PP
Definition at line 1798 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_of (const _CharT * __s, size_type __pos, size_type __n) const"

.PP
Find position of a character of C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP String containing characters to locate\&. 
.br
\fI__pos\fP Index of character to search from\&. 
.br
\fI__n\fP Number of characters from s to search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for one of the first \fI__n\fP characters of \fI__s\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_of (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline]\fP"

.PP
Find position of a character of C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP String containing characters to locate\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for one of the characters of \fI__s\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.PP
Definition at line 1828 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_first_of (_CharT __c, size_type __pos = \fC0\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find position of a character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to locate\&. 
.br
\fI__pos\fP Index of character to search from (default 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches forward for the character \fI__c\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&.
.PP
Note: equivalent to find(c, pos)\&. 
.PP
Definition at line 1847 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find last position of a character not in string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String containing characters to avoid\&. 
.br
\fI__pos\fP Index of character to search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for a character not contained in \fI__str\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.PP
Definition at line 1988 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (const _CharT * __s, size_type __pos, size_type __n) const"

.PP
Find last position of a character not in C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to avoid\&. 
.br
\fI__pos\fP Index of character to search back from\&. 
.br
\fI__n\fP Number of characters from s to consider\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for a character not contained in the first \fI__n\fP characters of \fI__s\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"

.PP
Find last position of a character not in C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to avoid\&. 
.br
\fI__pos\fP Index of character to search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for a character not contained in \fI__s\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.PP
Definition at line 2019 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [noexcept]\fP"

.PP
Find last position of a different character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to avoid\&. 
.br
\fI__pos\fP Index of character to search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for a character other than \fI__c\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_of (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find last position of a character of string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String containing characters to locate\&. 
.br
\fI__pos\fP Index of character to search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for one of the characters of \fI__str\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.PP
Definition at line 1862 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_of (const _CharT * __s, size_type __pos, size_type __n) const"

.PP
Find last position of a character of C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to locate\&. 
.br
\fI__pos\fP Index of character to search back from\&. 
.br
\fI__n\fP Number of characters from s to search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for one of the first \fI__n\fP characters of \fI__s\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_of (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"

.PP
Find last position of a character of C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string containing characters to locate\&. 
.br
\fI__pos\fP Index of character to search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for one of the characters of \fI__s\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.PP
Definition at line 1892 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::find_last_of (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find last position of a character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to locate\&. 
.br
\fI__pos\fP Index of character to search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for \fI__c\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&.
.PP
Note: equivalent to rfind(c, pos)\&. 
.PP
Definition at line 1911 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::front ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write reference to the data at the first element of the string\&. 
.PP
Definition at line 616 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[]()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::front () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reference to the data at the first element of the string\&. 
.PP
Definition at line 624 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[]()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> allocator_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::get_allocator () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Return copy of allocator used to construct this string\&. 
.PP
Definition at line 1664 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (const_iterator __p, size_type __n, _CharT __c)\fC [inline]\fP"

.PP
Insert multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Const_iterator referencing location in string to insert at\&. 
.br
\fI__n\fP Number of characters to insert 
.br
\fI__c\fP The character to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing the first inserted char\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Inserts \fI__n\fP copies of character \fI__c\fP starting at the position referenced by iterator \fI__p\fP\&. If adding characters causes the length to exceed max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 940 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (const_iterator __p, _InputIterator __beg, _InputIterator __end)\fC [inline]\fP"

.PP
Insert a range of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Const_iterator referencing location in string to insert at\&. 
.br
\fI__beg\fP Start of range\&. 
.br
\fI__end\fP End of range\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing the first inserted char\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Inserts characters in range [beg,end)\&. If adding characters causes the length to exceed max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 984 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (const_iterator __p, std::initializer_list< _CharT > __l)\fC [inline]\fP"

.PP
Insert an initializer_list of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Const_iterator referencing location in string to insert at\&. 
.br
\fI__l\fP The initializer_list of characters to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing the first inserted char\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&. 
.RE
.PP

.PP
Definition at line 1020 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos1, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"

.PP
Insert value of a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Iterator referencing location in string to insert at\&. 
.br
\fI__str\fP The string to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Inserts value of \fI__str\fP starting at \fI__pos1\fP\&. If adding characters causes the length to exceed max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1037 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos1, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n)\fC [inline]\fP"

.PP
Insert a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Iterator referencing location in string to insert at\&. 
.br
\fI__str\fP The string to insert\&. 
.br
\fI__pos2\fP Start of characters in str to insert\&. 
.br
\fI__n\fP Number of characters to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&. 
.br
\fIstd::out_of_range\fP If \fI__pos1\fP > size() or \fI__pos2\fP > \fI__str\&.size()\fP\&.
.RE
.PP
Starting at \fI__pos1\fP, insert \fI__n\fP character of \fI__str\fP beginning with \fI__pos2\fP\&. If adding characters causes the length to exceed max_size(), length_error is thrown\&. If \fI__pos1\fP is beyond the end of this string or \fI__pos2\fP is beyond the end of \fI__str\fP, out_of_range is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1060 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos, const _CharT * __s, size_type __n)\fC [inline]\fP"

.PP
Insert a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencing location in string to insert at\&. 
.br
\fI__s\fP The C string to insert\&. 
.br
\fI__n\fP The number of characters to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&. 
.br
\fIstd::out_of_range\fP If \fI__pos\fP is beyond the end of this string\&.
.RE
.PP
Inserts the first \fI__n\fP characters of \fI__s\fP starting at \fI__pos\fP\&. If adding characters causes the length to exceed max_size(), length_error is thrown\&. If \fI__pos\fP is beyond end(), out_of_range is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1083 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos, const _CharT * __s)\fC [inline]\fP"

.PP
Insert a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Iterator referencing location in string to insert at\&. 
.br
\fI__s\fP The C string to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&. 
.br
\fIstd::out_of_range\fP If \fI__pos\fP is beyond the end of this string\&.
.RE
.PP
Inserts the first \fI__n\fP characters of \fI__s\fP starting at \fI__pos\fP\&. If adding characters causes the length to exceed max_size(), length_error is thrown\&. If \fI__pos\fP is beyond end(), out_of_range is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1102 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (size_type __pos, size_type __n, _CharT __c)\fC [inline]\fP"

.PP
Insert multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index in string to insert at\&. 
.br
\fI__n\fP Number of characters to insert 
.br
\fI__c\fP The character to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&. 
.br
\fIstd::out_of_range\fP If \fI__pos\fP is beyond the end of this string\&.
.RE
.PP
Inserts \fI__n\fP copies of character \fI__c\fP starting at index \fI__pos\fP\&. If adding characters causes the length to exceed max_size(), length_error is thrown\&. If \fI__pos\fP > length(), out_of_range is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1126 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> iterator \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::insert (const_iterator __p, _CharT __c)\fC [inline]\fP"

.PP
Insert one character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__p\fP Iterator referencing position in string to insert at\&. 
.br
\fI__c\fP The character to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing newly inserted char\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Inserts character \fI__c\fP at position referenced by \fI__p\fP\&. If adding character causes the length to exceed max_size(), length_error is thrown\&. If \fI__p\fP is beyond end of string, out_of_range is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1145 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::length () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns the number of characters in the string, not including any null-termination\&. 
.PP
Definition at line 431 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::max_size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns the size() of the largest possible string\&. 
.PP
Definition at line 436 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator+= (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"

.PP
Append a string to this string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP The string to append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP

.PP
Definition at line 651 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator+= (const _CharT * __s)\fC [inline]\fP"

.PP
Append a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP The C string to append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP

.PP
Definition at line 660 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator+= (_CharT __c)\fC [inline]\fP"

.PP
Append a character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP The character to append\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP

.PP
Definition at line 669 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator+= (std::initializer_list< _CharT > __l)\fC [inline]\fP"

.PP
Append an initializer_list of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP The initializer_list of characters to be appended\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP

.PP
Definition at line 682 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"

.PP
Assign the value of \fIstr\fP to this string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&. 
.RE
.PP

.PP
Definition at line 256 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > && __str)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
String move assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP Source string\&.
.RE
.PP
The contents of \fI__str\fP are moved into this string (without copying)\&. \fI__str\fP is a valid, but unspecified string\&. 
.PP
Definition at line 268 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::swap()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (std::initializer_list< _CharT > __l)\fC [inline]\fP"

.PP
Set value to string constructed from initializer list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__l\fP std::initializer_list\&. 
.RE
.PP

.PP
Definition at line 280 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (const _CharT * __s)\fC [inline]\fP"

.PP
Copy contents of \fI__s\fP into this string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP Source null-terminated string\&. 
.RE
.PP

.PP
Definition at line 292 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator= (_CharT __c)\fC [inline]\fP"

.PP
Set value to string of length 1\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Source character\&.
.RE
.PP
Assigning to a character makes this string length 1 and (*this)[0] == \fI__c\fP\&. 
.PP
Definition at line 303 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const_reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator[] (size_type __pos) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Subscript access to the data contained in the string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP The index of the character to access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (constant) reference to the character\&.
.RE
.PP
This operator allows for easy, array-style, data access\&. Note that data access with this operator is unchecked and out_of_range lookups are not defined\&. (For checked lookups see at()\&.) 
.PP
Definition at line 537 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::back(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::front()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> reference \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::operator[] (size_type __pos)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Subscript access to the data contained in the string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP The index of the character to access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference to the character\&.
.RE
.PP
This operator allows for easy, array-style, data access\&. Note that data access with this operator is unchecked and out_of_range lookups are not defined\&. (For checked lookups see at()\&.) Unshares the string\&. 
.PP
Definition at line 554 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::pop_back ()\fC [inline]\fP"

.PP
Remove the last character\&. The string must be non-empty\&. 
.PP
Definition at line 1235 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::push_back (_CharT __c)\fC [inline]\fP"

.PP
Append a single character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to append\&. 
.RE
.PP

.PP
Definition at line 788 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::capacity(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator+=()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBreverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rbegin ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write reverse iterator that points to the last character in the string\&. Iteration is done in reverse element order\&. Unshares the string\&. 
.PP
Definition at line 354 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBconst_reverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rbegin () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator that points to the last character in the string\&. Iteration is done in reverse element order\&. 
.PP
Definition at line 363 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBreverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rend ()\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read/write reverse iterator that points to one before the first character in the string\&. Iteration is done in reverse element order\&. Unshares the string\&. 
.PP
Definition at line 372 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::begin()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fBconst_reverse_iterator\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rend () const\fC [inline]\fP, \fC [noexcept]\fP"
Returns a read-only (constant) reverse iterator that points to one before the first character in the string\&. Iteration is done in reverse element order\&. 
.PP
Definition at line 381 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::begin()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos, size_type __n, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"

.PP
Replace characters with value from another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character to replace\&. 
.br
\fI__n\fP Number of characters to be replaced\&. 
.br
\fI__str\fP String to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__pos\fP is beyond the end of this string\&. 
.br
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [pos,pos+n) from this string\&. In place, the value of \fI__str\fP is inserted\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If the length of the result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1257 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos1, size_type __n1, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n2)\fC [inline]\fP"

.PP
Replace characters with value from another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos1\fP Index of first character to replace\&. 
.br
\fI__n1\fP Number of characters to be replaced\&. 
.br
\fI__str\fP String to insert\&. 
.br
\fI__pos2\fP Index of first character of str to use\&. 
.br
\fI__n2\fP Number of characters from str to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__pos1\fP > size() or \fI__pos2\fP > str\&.size()\&. 
.br
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [pos1,pos1 + n) from this string\&. In place, the value of \fI__str\fP is inserted\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If the length of the result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1280 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2)\fC [inline]\fP"

.PP
Replace characters with value of a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character to replace\&. 
.br
\fI__n1\fP Number of characters to be replaced\&. 
.br
\fI__s\fP C string to insert\&. 
.br
\fI__n2\fP Number of characters from \fI__s\fP to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__pos1\fP > size()\&. 
.br
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string\&. In place, the first \fI__n2\fP characters of \fI__s\fP are inserted, or all of \fI__s\fP if \fI__n2\fP is too large\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1308 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos, size_type __n1, const _CharT * __s)\fC [inline]\fP"

.PP
Replace characters with value of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character to replace\&. 
.br
\fI__n1\fP Number of characters to be replaced\&. 
.br
\fI__s\fP C string to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__pos\fP > size()\&. 
.br
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string\&. In place, the characters of \fI__s\fP are inserted\&. If \fIpos\fP is beyond end of string, out_of_range is thrown\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1332 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (size_type __pos, size_type __n1, size_type __n2, _CharT __c)\fC [inline]\fP"

.PP
Replace characters with multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character to replace\&. 
.br
\fI__n1\fP Number of characters to be replaced\&. 
.br
\fI__n2\fP Number of characters to insert\&. 
.br
\fI__c\fP Character to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If \fI__pos\fP > size()\&. 
.br
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string\&. In place, \fI__n2\fP copies of \fI__c\fP are inserted\&. If \fI__pos\fP is beyond end of string, out_of_range is thrown\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1356 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (const_iterator __i1, const_iterator __i2, const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str)\fC [inline]\fP"

.PP
Replace range of characters with string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace\&. 
.br
\fI__i2\fP Iterator referencing end of range to replace\&. 
.br
\fI__str\fP String value to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [i1,i2)\&. In place, the value of \fI__str\fP is inserted\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1375 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (const_iterator __i1, const_iterator __i2, const _CharT * __s, size_type __n)\fC [inline]\fP"

.PP
Replace range of characters with C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace\&. 
.br
\fI__i2\fP Iterator referencing end of range to replace\&. 
.br
\fI__s\fP C string value to insert\&. 
.br
\fI__n\fP Number of characters from s to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [i1,i2)\&. In place, the first \fIn\fP characters of \fI__s\fP are inserted\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1398 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (const_iterator __i1, const_iterator __i2, const _CharT * __s)\fC [inline]\fP"

.PP
Replace range of characters with C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace\&. 
.br
\fI__i2\fP Iterator referencing end of range to replace\&. 
.br
\fI__s\fP C string value to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [i1,i2)\&. In place, the characters of \fI__s\fP are inserted\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1424 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (const_iterator __i1, const_iterator __i2, size_type __n, _CharT __c)\fC [inline]\fP"

.PP
Replace range of characters with multiple characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace\&. 
.br
\fI__i2\fP Iterator referencing end of range to replace\&. 
.br
\fI__n\fP Number of characters to insert\&. 
.br
\fI__c\fP Character to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [i1,i2)\&. In place, \fI__n\fP copies of \fI__c\fP are inserted\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1449 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2)\fC [inline]\fP"

.PP
Replace range of characters with range\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace\&. 
.br
\fI__i2\fP Iterator referencing end of range to replace\&. 
.br
\fI__k1\fP Iterator referencing start of range to insert\&. 
.br
\fI__k2\fP Iterator referencing end of range to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [i1,i2)\&. In place, characters in the range [k1,k2) are inserted\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1478 of file vstring\&.h\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP& \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::replace (const_iterator __i1, const_iterator __i2, std::initializer_list< _CharT > __l)\fC [inline]\fP"

.PP
Replace range of characters with initializer_list\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__i1\fP Iterator referencing start of range to replace\&. 
.br
\fI__i2\fP Iterator referencing end of range to replace\&. 
.br
\fI__l\fP The initializer_list of characters to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If new length exceeds \fCmax_size()\fP\&.
.RE
.PP
Removes the characters in the range [i1,i2)\&. In place, characters in the range [k1,k2) are inserted\&. If the length of result exceeds max_size(), length_error is thrown\&. The value of the string doesn't change if an error is thrown\&. 
.PP
Definition at line 1582 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::reserve (size_type __res_arg = \fC0\fP)\fC [inline]\fP"

.PP
Attempt to preallocate enough memory for specified number of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__res_arg\fP Number of characters required\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::length_error\fP If \fI__res_arg\fP exceeds \fCmax_size()\fP\&.
.RE
.PP
This function attempts to reserve enough memory for the string to hold the specified number of characters\&. If the number requested is more than max_size(), length_error is thrown\&.
.PP
The advantage of this function is that if optimal code is a necessity and the user can determine the string length that will be required, the user can reserve the memory in advance, and thus prevent a possible reallocation of memory and copying of string data\&. 
.PP
Definition at line 507 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::shrink_to_fit()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::resize (size_type __n, _CharT __c)"

.PP
Resizes the string to the specified number of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of characters the string should contain\&. 
.br
\fI__c\fP Character to fill any new elements\&.
.RE
.PP
This function will resize the string to the specified number of characters\&. If the number is smaller than the string's current size the string is truncated, otherwise the string is extended and new elements are set to \fI__c\fP\&. 
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::resize()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::resize (size_type __n)\fC [inline]\fP"

.PP
Resizes the string to the specified number of characters\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__n\fP Number of characters the string should contain\&.
.RE
.PP
This function will resize the string to the specified length\&. If the new size is smaller than the string's current size the string is truncated, otherwise the string is extended and new characters are default-constructed\&. For basic types such as char, this means setting them to 0\&. 
.PP
Definition at line 463 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::resize()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rfind (const \fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Find last position of a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__str\fP String to locate\&. 
.br
\fI__pos\fP Index of character to search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for value of \fI__str\fP within this string\&. If found, returns the index where it begins\&. If not found, returns npos\&. 
.PP
Definition at line 1738 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rfind (const _CharT * __s, size_type __pos, size_type __n) const"

.PP
Find last position of a C substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to locate\&. 
.br
\fI__pos\fP Index of character to search back from\&. 
.br
\fI__n\fP Number of characters from s to search for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for the first \fI__n\fP characters in \fI__s\fP within this string\&. If found, returns the index where it begins\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rfind (const _CharT * __s, size_type __pos = \fC\fBnpos\fP\fP) const\fC [inline]\fP"

.PP
Find last position of a C string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP C string to locate\&. 
.br
\fI__pos\fP Index of character to start search at (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for the value of \fI__s\fP within this string\&. If found, returns the index where it begins\&. If not found, returns npos\&. 
.PP
Definition at line 1768 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::rfind (_CharT __c, size_type __pos = \fC\fBnpos\fP\fP) const\fC [noexcept]\fP"

.PP
Find last position of a character\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__c\fP Character to locate\&. 
.br
\fI__pos\fP Index of character to search back from (default end)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence\&.
.RE
.PP
Starting from \fI__pos\fP, searches backward for \fI__c\fP within this string\&. If found, returns the index where it was found\&. If not found, returns npos\&. 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::shrink_to_fit ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
A non-binding request to reduce capacity() to size()\&. 
.PP
Definition at line 469 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::capacity(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::reserve(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns the number of characters in the string, not including any null-termination\&. 
.PP
Definition at line 425 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::at(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::back(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::cend(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::empty(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert(), std::operator<<(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[](), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::pop_back(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::shrink_to_fit()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> \fB__versa_string\fP \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::substr (size_type __pos = \fC0\fP, size_type __n = \fC\fBnpos\fP\fP) const\fC [inline]\fP"

.PP
Get a substring\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__pos\fP Index of first character (default 0)\&. 
.br
\fI__n\fP Number of characters in substring (default remainder)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The new string\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP If pos > size()\&.
.RE
.PP
Construct and return a new string using the \fI__n\fP characters starting at \fI__pos\fP\&. If the string is too short, use the remainder of the characters\&. If \fI__pos\fP is beyond the end of the string, out_of_range is thrown\&. 
.PP
Definition at line 2052 of file vstring\&.h\&.
.PP
References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string()\&.
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> void \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::swap (\fB__versa_string\fP< _CharT, _Traits, _Alloc, _Base > & __s)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Swap contents with another string\&. 
.PP
\fBParameters:\fP
.RS 4
\fI__s\fP String to swap with\&.
.RE
.PP
Exchanges the contents of this string with that of \fI__s\fP in constant time\&. 
.PP
Definition at line 1636 of file vstring\&.h\&.
.PP
Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator=(), and __gnu_cxx::swap()\&.
.SH "Member Data Documentation"
.PP 
.SS "template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base> const size_type \fB__gnu_cxx::__versa_string\fP< _CharT, _Traits, _Alloc, _Base >::npos\fC [static]\fP"

.PP
Value returned by various member functions when they fail\&. 
.PP
Definition at line 81 of file vstring\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code\&.
